@namespace FSM.Blazor.Pages.Company
@using FSM.Blazor.Data.Company
@using DataModels.VM.Company

@inject CompanyService CompanyService
@layout MainLayout

@page "/Company"

<div class="row">
    <div class="col">
        <h2 style="float:left">Manage Companies Details</h2>
        @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName))
        {
            <RadzenButton Style="float:right" Text="Add New" Icon="add_circle_outline" IsBusy="@isBusyAddButton" BusyText="Add New .."
                      ButtonStyle="ButtonStyle.Primary" Click=@(() => CompanyCreateDialog(new CompanyVM(), "Create Company")) />
        }
    </div>
</div>


<div class="row" style="margin-bottom:22px;">

    <div class="col-md-4">
        <RadzenTextBox style="width: 100%;" Name="SearchText" Change="@(args =>  grid.Reload())"
                       Placeholder="Search Company" @bind-Value="@searchText" />
    </div>

</div>

<RadzenDataGrid AllowFiltering="true" @ref="grid" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Simple" AllowPaging="true" IsLoading="@isLoading"
                PageSize="@pageSize"
                AllowSorting="true" Data="@data" TItem="CompanyVM"
                PageSizeOptions="@pageSizeOptions"
                Count="@count" LoadData="@LoadData" ShowPagingSummary="true"
                PagingSummaryFormat="@pagingSummaryFormat">
    <Columns>

        <RadzenDataGridColumn TItem="CompanyVM" Title="Logo" Sortable="false" Filterable="false" Width="65px">
            <Template Context="data">
                <RadzenImage onerror="this.onerror=null;this.src='../img/company-default-logo.png';" Path="@data.LogoPath" style="width: 45px; height: 45px; border-radius: 22px;" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CompanyVM" Title="Name" Filterable="false" Sortable="false">
            <Template Context="value">

                <a href="javascript:void(0)" @onclick="@((ui) => OpenCompanyDetailPage(value))">@value.Name</a>

            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CompanyVM" Filterable="false" Property="Name" Title="Name"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CompanyVM" Filterable="false" Sortable="false" Property="Address" Title="Address"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CompanyVM" Filterable="false" Sortable="false" Property="TimeZone" Title="TimeZone"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CompanyVM" Filterable="false" Sortable="false" Property="ContactNo" Title="Contact No"></RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CompanyVM" Title="Website" Filterable="false" Sortable="false">
            <Template Context="value">

                @if (!string.IsNullOrWhiteSpace(value.Website))
                {
                    <a href="@value.Website" target="_blank">@value.Website</a>
                }
                else
                {
                    <RadzenLabel Text="-"></RadzenLabel>
                }

            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="160px" Sortable="false" Filterable="false" TItem="CompanyVM" Property="Id" Title="Actions">
            <Template Context="data">

                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="settings"  Class="m-1" Click=@(() => OpenCompanyDetailPage(data)) />
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="mode_edit" IsBusy="@data.IsLoadingEditButton" Class="m-1" Click=@(() => CompanyCreateDialog(data,"Edit Company")) />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete_sweep" Class="m-1"
                              Click=@(args => OpenDeleteDialog(data)) />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Create companyData=@(_companyData) CloseDialogCallBack="@CloseDialog"></Create>
            }
            else
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to remove <b> @_companyData.Name </b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                            {
                                <RadzenButton Text="Yes" ButtonStyle="ButtonStyle.Danger" Click="() => DeleteAsync(_companyData.Id) " Class="mr-1" Style="width: 80px;" />
                            }

                            <RadzenButton Text="No" Click="@(() => isDisplayPopup = false)" ButtonStyle="ButtonStyle.Light" Class="mr-1" Style="width: 80px;" />

                        </div>
                    </div>
                </div>
            }
        </Body>
    </CustomPopupComponent>
}