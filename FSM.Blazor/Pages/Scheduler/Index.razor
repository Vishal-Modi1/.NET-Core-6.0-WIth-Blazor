@using BlazorMaterialIcons
@using DataModels.VM.AircraftEquipment
@using DataModels.VM.Common
@using FSM.Blazor.Data.AircraftSchedule
@using FSM.Blazor.Data.Aircraft
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Schedule
@using System.Collections.ObjectModel
@using System.ComponentModel
@using DE = DataModels.Entities
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Buttons;
@using DataModels.VM.Scheduler;
@using Syncfusion.Blazor.Popups;
@using DataModels.Entities;
@using DataModels.VM;

@inject AircraftSchedulerService AircraftSchedulerService
@inject AircraftService AircraftService
@layout MainLayout
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject AircraftSchedulerDetailService AircraftSchedulerDetailService

@page "/Scheduler"

<style>
    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.scheduled,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.scheduled,
    .e-schedule .e-month-view .e-appointment.scheduled {
        background: #007bff;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.checkedout,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.checkedout,
    .e-schedule .e-month-view .e-appointment.checkedout {
        background: #33ff81;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.checkedin,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.checkedin,
    .e-schedule .e-month-view .e-appointment.checkedin {
        background: #B8B8B8;
    }
</style>

<PageTitle>Scheduler | Fly Manager </PageTitle>

<SfSchedule TValue="SchedulerVM" Height="800px" @ref="@ScheduleRef" ShowQuickInfo="false" @bind-SelectedDate="@currentDate" @bind-CurrentView="@CurrentView">

    <ScheduleGroup EnableCompactView="false" Resources="@Resources"></ScheduleGroup>

    <ScheduleEventSettings DataSource="@DataSource" EnableTooltip="true">

        <ScheduleField Id="Id">
            <FieldSubject Name="DisplayTitle"></FieldSubject>
            <FieldStartTime Name="StartTime"></FieldStartTime>
            <FieldEndTime Name="EndTime"></FieldEndTime>
        </ScheduleField>

    </ScheduleEventSettings>
    <ScheduleEvents TValue="SchedulerVM" OnEventDoubleClick="OnEventClick" EventRendered="OnEventRendered"
                    OnCellDoubleClick="OpenCreateAppointmentDialog" OnCellClick="OpenCreateAppointmentDialog" OnEventClick="OnEventClick"></ScheduleEvents>

    <ScheduleResources>

        <ScheduleResource TItem="ResourceData" TValue="long[]" DataSource="@ObservableAircraftsData" Field="AircraftId" Title="Aircraft"
                          Name="Aircrafts" TextField="AircraftTailNo" IdField="Id" AllowMultiple="true">
        </ScheduleResource>

    </ScheduleResources>


    <ScheduleViews>
        <ScheduleView Option="View.TimelineDay"></ScheduleView>
        <ScheduleView Option="View.TimelineWeek"></ScheduleView>
        <ScheduleView Option="View.TimelineWorkWeek"></ScheduleView>
        <ScheduleView Option="View.TimelineMonth"></ScheduleView>
        <ScheduleView Option="View.Agenda"></ScheduleView>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.WorkWeek"></ScheduleView>
        <ScheduleView Option="View.Month"></ScheduleView>
    </ScheduleViews>

</SfSchedule>


<SfDialog @bind-Visible="@dialogVisibility" AllowDragging="true" IsModal="true" Width="575px" ShowCloseIcon="true">

    <DialogTemplates>
        <Header> <div>Schedule Appointment</div> </Header>
        <Content>

            @if (isDisplayMainForm)
            {

                @*<EditForm Model="schedulerVM" OnValidSubmit="@OnValidSubmit">*@

                <RadzenTemplateForm Data="@schedulerVM" Submit="@((SchedulerVM args) => {  OnValidSubmit(); })">

                    @if (isDisplayForm)
                {
                    <table class="custom-event-editor" width="100%" cellpadding="5">
                        <tbody>

                            <tr>
                                <td class="e-textlabel">Display Title</td>
                                <td colspan="4">

                                    <RadzenTextBox Placeholder="Enter Title" Name="Title" @bind-Value="schedulerVM.DisplayTitle" Class="w-100">
                                    </RadzenTextBox>

                                    <RadzenRequiredValidator Component="Title" Text="Title is required" Style="position: relative" />
                                </td>
                            </tr>

                            <tr>
                                <td class="e-textlabel">Activity Type</td>
                                <td colspan="4">

                                    <RadzenDropDown AllowClear="true" TValue="int?" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowFiltering="true" Class="w-100" Change="@(args => OnActivityTypeValueChanged(args))"
                                                Placeholder="Select Activity" Data=@schedulerVM.ScheduleActivitiesList TextProperty="Name"
                                                ValueProperty="Id" Name="ScheduleActivityId" @bind-Value="@(schedulerVM.ScheduleActivityId)" />

                                    <RadzenRequiredValidator DefaultValue="0" Component="ScheduleActivityId"
                                                         Text="Schedule activity is required" Style="position: relative">

                                    </RadzenRequiredValidator>

                                </td>
                            </tr>

                            <tr>
                                <td class="e-textlabel">Start Time</td>
                                <td colspan="4">

                                    <RadzenDatePicker TValue="DateTime" ShowTime="true" Name="StartTime"
                                                  HoursStep="1" MinutesStep="30" @bind-Value="@schedulerVM.StartTime"
                                                  DateFormat="MM/dd/yyyy HH:mm" Class="w-100" />

                                    <RadzenRequiredValidator Component="StartTime"
                                                         Text="Please select start time" Style="position: relative"></RadzenRequiredValidator>
                                </td>
                            </tr>

                            <tr>
                                <td class="e-textlabel">End Time</td>
                                <td colspan="4">
                                    <RadzenDatePicker TValue="DateTime" ShowTime="true" Name="EndTime"
                                                  HoursStep="1" MinutesStep="30" @bind-Value="@schedulerVM.EndTime"
                                                  DateFormat="MM/dd/yyyy HH:mm" Class="w-100" />

                                    <RadzenRequiredValidator Component="EndTime"
                                                         Text="Please select end time" Style="position: relative"></RadzenRequiredValidator>

                                    <RadzenCompareValidator Value=@schedulerVM.StartTime Component="EndTime"
                                                        Style="position: relative" Text="End time is not valid" Operator=CompareOperator.GreaterThan />
                                </td>
                            </tr>

                            @if (isDisplayAircraftDropDown)
                            {
                                <tr>
                                    <td class="e-textlabel">Aircraft</td>
                                    <td colspan="4">

                                        <RadzenDropDown AllowClear="true" TValue="long?"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowFiltering="true" Class="w-100"
                                                Placeholder="Select Aircraft" Data=@schedulerVM.AircraftsList TextProperty="Name"
                                                ValueProperty="Id" Name="AircraftId" @bind-Value="@(schedulerVM.AircraftId)" />


                                        <RadzenRequiredValidator Component="AircraftId" DefaultValue="0"
                                                         Text="Please select aircraft" Style="position: relative"></RadzenRequiredValidator>

                                    </td>
                                </tr>
                            }

                            @if (schedulerVM.ScheduleActivityId > 0)
                            {
                                @if (isDisplayRecurring)
                                {
                                    <tr>
                                        <td class="e-textlabel">Recurring ?</td>
                                        <td colspan="4">

                                            <RadzenCheckBox @bind-Value=@schedulerVM.IsRecurring Name="IsRecurring" TValue="bool" />

                                        </td>
                                    </tr>
                                }

                                @if (isDisplayMember1Dropdown)
                                {
                                    <tr>
                                        <td class="e-textlabel">Member 1</td>
                                        <td colspan="4">

                                            <RadzenDropDown AllowClear="true" TValue="long?"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowFiltering="true" Class="w-100"
                                                Placeholder="Select Member 1" Data=@schedulerVM.Member1List TextProperty="Name"
                                                ValueProperty="Id" Name="Member1Id" @bind-Value="@(schedulerVM.Member1Id)" />

                                        </td>
                                    </tr>
                                }

                                @if (isDisplayMember2Dropdown)
                                {
                                    <tr>
                                        <td class="e-textlabel">Member 2</td>
                                        <td colspan="4">

                                            <RadzenDropDown AllowClear="true" TValue="long?"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowFiltering="true" Class="w-100"
                                                Placeholder="Select Member 2" Data=@schedulerVM.Member2List TextProperty="Name"
                                                ValueProperty="Id" Name="Member2Id" @bind-Value="@(schedulerVM.Member2Id)" />

                                        </td>
                                    </tr>

                                }

                                @if (isDisplayFlightInfo)
                                {
                                    <tr>
                                        <td class="e-textlabel">Flight Type</td>
                                        <td colspan="4">
                                        </td>
                                    </tr>

                                    <tr>
                                        <td class="e-textlabel">Flight Rules</td>
                                        <td colspan="4">
                                        </td>
                                    </tr>

                                    <tr>
                                        <td class="e-textlabel">Est Hours</td>
                                        <td colspan="4">

                                            <RadzenNumeric Placeholder="Enter Hours" @bind-Value="schedulerVM.EstHours">
                                            </RadzenNumeric>

                                        </td>
                                    </tr>

                                }
                                @if (isDisplayInstructor)
                                {
                                    <tr>
                                        <td class="e-textlabel">Instructor</td>
                                        <td colspan="4">

                                            <RadzenDropDown AllowClear="true" TValue="long?"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowFiltering="true" Class="w-100"
                                                Placeholder="Select Instructor" Data=@schedulerVM.InstructorsList TextProperty="Name"
                                                ValueProperty="Id" Name="Member2Id" @bind-Value="@(schedulerVM.InstructorId)" />

                                        </td>
                                    </tr>
                                }

                                @if (isDisplayFlightRoutes)
                                {
                                    <tr>
                                        <td class="e-textlabel">Flight Routes</td>
                                        <td colspan="4">
                                            <RadzenTextArea Class="w-100" Placeholder="Enter fligt routes" @bind-Value="@schedulerVM.FlightRoutes"></RadzenTextArea>
                                        </td>
                                    </tr>
                                }

                                <tr>
                                    <td class="e-textlabel">Comments</td>
                                    <td colspan="4">
                                        <RadzenTextArea Class="w-100" Placeholder="Enter comments" @bind-Value="@schedulerVM.Comments"></RadzenTextArea>
                                    </td>
                                </tr>

                                <tr>
                                    <td class="e-textlabel">Internal Comments</td>
                                    <td colspan="4">

                                        <RadzenTextArea Class="w-100" Placeholder="Enter internal comments" @bind-Value="@schedulerVM.InternalComments"></RadzenTextArea>
                                    </td>
                                </tr>

                            }
                            @if (isDisplayStandBy)
                            {
                                <tr>
                                    <td class="e-textlabel">StandBy</td>
                                    <td colspan="4">

                                        <RadzenCheckBox @bind-Value="@schedulerVM.IsStandBy" Name="IsRecurring" TValue="bool" />
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>

                    <div class="row" style="margin-top:4%">
                        <div class="col-md-12 text-right">
                            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Continue" Style="width: 130px" />
                            <RadzenButton Click="@((args) => CloseDialog())" ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Style="width: 120px" Class="mr-1" />
                        </div>
                    </div>
                }

                else
                {
                    <div class="row justify-content-center align-items-center alert alert-warning">
                        <div class="col-4 d-flex flex-column">
                            <h5 class="d-flex justify-content-center">Start</h5>
                            <div class="d-flex justify-content-center">@schedulerVM.StartTime.ToString("ddd, MMM dd")</div>
                            <div class="d-flex justify-content-center">@schedulerVM.StartTime.ToString("%h:mm tt")</div>
                        </div>
                        <div class="col-4 d-flex flex-column">
                            <span class="d-flex justify-content-center">
                                <h6>
                                    <MaterialIcon Theme="@MaterialIcon.Themes.TwoTone" Size="48">flight_takeoff</MaterialIcon>
                                </h6>
                            </span>
                        </div>
                        <div class="col-4 d-flex flex-column">
                            <h5 class="d-flex justify-content-center">End</h5>
                            <div class="d-flex justify-content-center">@schedulerVM.EndTime.ToString("ddd, MMM dd")</div>
                            <div class="d-flex justify-content-center">@schedulerVM.EndTime.ToString("%h:mm tt")</div>
                        </div>
                    </div>
                    <div class="row justify-content-center align-items-center ">
                        <div class="col-12 d-flex flex-column">
                            <h4 class="d-flex justify-content-center popup-title">Reservation Id</h4>
                            <span class="d-flex justify-content-center">
                                @if (schedulerVM.ReservationId != Guid.Empty)
                                {
                                    @schedulerVM.ReservationId
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </span>
                        </div>
                    </div>
                    <hr />
                    <div class="row justify-content-center mt-2">
                        <div class="col-4 d-flex flex-column">
                            <h4 class="d-flex justify-content-center popup-title">Activity</h4>
                            <span class="d-flex justify-content-center">@(@schedulerVM.ScheduleActivitiesList.FirstOrDefault(p => p.Id == @schedulerVM.ScheduleActivityId)?.Name )</span>
                        </div>
                        <div class="col-4 d-flex flex-column">
                            <h4 class="d-flex justify-content-center popup-title">Aircraft</h4>
                            <span class="d-flex justify-content-center">@(@schedulerVM.AircraftsList.FirstOrDefault(p => p.Id == @schedulerVM.AircraftId)?.Name ?? "-")</span>
                        </div>
                        <div class="col-4 d-flex flex-column">
                            <h4 class="d-flex justify-content-center popup-title">Title</h4>
                            <span class="d-flex justify-content-center"> @(schedulerVM.DisplayTitle)</span>
                        </div>
                    </div>
                    <hr />
                    <div class="row justify-content-center d-flex align-items-start">
                        <div class="col-4 d-flex flex-column">
                            <h4 class="d-flex justify-content-center popup-title">Member 1</h4>
                            <span class="d-flex justify-content-center">
                                @if (@schedulerVM.Member1Id != null)
                                {
                                    var member1 = @schedulerVM.Member1List.FirstOrDefault(p => p.Id == @schedulerVM.Member1Id);
                                    <span>@(member1 != null && !@String.IsNullOrEmpty(member1.Name) ? member1.Name : "-" )</span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </span>
                        </div>
                        <div class="col-4 d-flex flex-column">
                            <h4 class="d-flex justify-content-center popup-title">Member 2</h4>
                            <span class="d-flex justify-content-center">
                                @if (@schedulerVM.Member2Id != null)
                                {
                                    var member2 = @schedulerVM.Member2List.FirstOrDefault(p => p.Id == @schedulerVM.Member2Id);
                                    <span>@(member2 != null && !@String.IsNullOrEmpty(member2.Name) ? member2.Name : "-" )</span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </span>
                        </div>
                        <div class="col-4 d-flex flex-column">
                            <h4 class="d-flex justify-content-center popup-title">Instructor</h4>
                            <span class="d-flex justify-content-center">
                                @if (@schedulerVM.InstructorId != null && @schedulerVM.InstructorsList.Where(p => p.Id == @schedulerVM.InstructorId).FirstOrDefault() != null)
                                {
                                    @schedulerVM.InstructorsList.Where(p=>p.Id == @schedulerVM.InstructorId).First().Name
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </span>
                        </div>
                    </div>
                    <div class="row justify-content-center d-flex align-items-start mt-2 bg-gray alert" style="background:#CBCBCB;">
                        <strong>Comments </strong>
                    </div>
                    <div class="row justify-content-baseline d-flex align-items-start mt-2 alert" >
                         <div class="col-12 d-flex flex-column">
                           @(schedulerVM.Comments ?? "-")
                        </div>
                        
                    </div>
                     <div class="row justify-content-center d-flex align-items-start mt-2 bg-gray alert" style="background:#CBCBCB;">
                        <strong>Internal Comments </strong>
                    </div>
                    <div class="row justify-content-baseline d-flex align-items-start mt-2 alert" >
                         <div class="col-12 d-flex flex-column">
                            @(schedulerVM.InternalComments ?? "-")
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-evenly">
                        @if (isDisplayCheckOutOption)
                        {
                            @if (isDisplayCheckInButton)
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@((args) => CheckInAircraft())" BusyText="Checking In ..."
                                  IsBusy="@isBusyCheckOutButton" Text="Check In" Style="width: 164px" />
                            }
                            else
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@((args) => CheckOutAircraft())" BusyText="Checking Out ..."
                                  IsBusy="@isBusyCheckOutButton" Text="Check Out" Style="width: 164px" />
                            }

                            if (schedulerVM.AircraftSchedulerDetailsVM.IsCheckOut)
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@((args) => ShowEditEndTimeForm())" Text="Edit End Time" Style="width: 164px" />
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@((args) => UnCheckOut())" Text="Un-Check Out" Style="width: 164px" />
                            }
                            else
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@((args) => OpenForm())" Text="Edit" Style="width: 164px" />
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@((args) => OpenDeleteDialog())" Text="Delete" Style="width: 164px" />
                            }
                        }
                        else if (schedulerVM.AircraftSchedulerDetailsVM.CheckInTime != null)
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@((args) => ShowEditEndTimeForm())" Text="Edit End Time" Style="width: 164px" />
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@((args) => EditFlightTime())" Text="Edit Flight Time" Style="width: 164px" />
                        }
                        else
                        {
                            <RadzenButton ButtonType="Radzen.ButtonType.Submit" BusyText="Saving ..." IsBusy="@isBusy" Text="Save" Style="width: 130px" />
                            <RadzenButton Click="@((args) => CloseDialog())" ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Style="width: 120px" Class="mr-1" />
                        }
                    </div>
                }

                @if (schedulerVM.AircraftSchedulerDetailsVM.IsCheckOut || schedulerVM.AircraftSchedulerDetailsVM.CheckInTime != null)
                {
                    <table style="width:100%;">
                        <thead>
                            <tr>
                                <th>Meter</th>
                                <th>Time Out</th>
                                <th>Time In</th>
                                <th>Total</th>
                            </tr>
                        </thead>

                        <tbody>

                            @foreach (AircraftEquipmentTimeVM aircraftEquipmentTime in schedulerVM.AircraftEquipmentsTimeList)
                            {
                                AircraftScheduleHobbsTime aircraftScheduleHobbsTime = schedulerVM.AircraftEquipmentHobbsTimeList.Where(p => p.AircraftEquipmentTimeId == aircraftEquipmentTime.Id).FirstOrDefault();
                                <tr>
                                    <td>@aircraftEquipmentTime.EquipmentName</td>

                                    @if (aircraftScheduleHobbsTime != null)
                                    {
                                        <td>@aircraftScheduleHobbsTime.OutTime</td>
                                        <td>@aircraftScheduleHobbsTime.InTime</td>
                                        <td>@aircraftScheduleHobbsTime.TotalTime</td>
                                    }
                                    else
                                    {
                                        <td>@aircraftEquipmentTime.Hours</td>
                                        <td>-</td>
                                        <td>-</td>
                                    }

                                </tr>
                            }
                        </tbody>
                    </table>
                }

                @* </EditForm>*@

            </RadzenTemplateForm>

                @if (!string.IsNullOrWhiteSpace(schedulerVM.AircraftSchedulerDetailsVM.CheckOutByUserName))
                {
                    <div>
                        <label>

                            <b>Checked Out :</b>  @schedulerVM.AircraftSchedulerDetailsVM.CheckOutByUserName
                            <br>@schedulerVM.AircraftSchedulerDetailsVM.CheckOutTime.Value.ToString("MM/dd/yyyy hh:mm tt")

                        </label>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(schedulerVM.AircraftSchedulerDetailsVM.CheckInByUserName))
                {
                    <div>
                        <label>

                            <b>Checked In :</b>  @schedulerVM.AircraftSchedulerDetailsVM.CheckInByUserName
                            <br>@schedulerVM.AircraftSchedulerDetailsVM.CheckInTime.Value.ToString("MM/dd/yyyy hh:mm tt")
                        </label>
                    </div>
                }
            }
            else if (isDisplayEditEndTimeForm)
            {
                @*  <EditForm Model="schedulerVM" OnValidSubmit="@UpdateEndTime">*@
                <RadzenTemplateForm Data="@schedulerVM" Submit="@((SchedulerVM args) => {  UpdateEndTime(); })">
                    <div>
                        <label>

                            <b>Start Time : </b>
                            @schedulerVM.StartTime.ToString("dd//MM//yyyy hh:mm tt")

                            <RadzenDatePicker Visible="false" TValue="DateTime" ShowTime="true" Name="StartTime"
                                          HoursStep="1" MinutesStep="30" @bind-Value="@schedulerVM.StartTime"
                                          DateFormat="MM/dd/yyyy HH:mm" />

                        </label>
                    </div>

                    <div>
                        4
                        <label>

                            <b>End Time</b>

                            <RadzenDatePicker TValue="DateTime" ShowTime="true" Name="EndTime"
                                          HoursStep="1" MinutesStep="30" @bind-Value="@schedulerVM.EndTime"
                                          DateFormat="MM/dd/yyyy HH:mm" Class="w-100" />

                            <RadzenRequiredValidator Component="EndTime"
                                                 Text="Please select end time" Style="position: relative"></RadzenRequiredValidator>

                            <RadzenCompareValidator Value=@schedulerVM.StartTime Component="EndTime"
                                                Style="position: relative" Text="End time is not valid" Operator=CompareOperator.GreaterThan />

                        </label>
                    </div>

                    <RadzenButton ButtonType="Radzen.ButtonType.Submit" BusyText="Saving ..." IsBusy="@isBusy" Text="Update" Style="width: 130px" />
                    <RadzenButton Click="@((args) => HideEditEndTimeForm())" ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Style="width: 120px" Class="mr-1" />

                </RadzenTemplateForm>
            }
            else
            {
                <RadzenTemplateForm Data="@schedulerVM" Submit="@((SchedulerVM args) => {  CheckIn(); })">

                    <table class="custom-event-editor" width="100%" cellpadding="5">

                        <thead>

                            <tr>
                                <th>Meter</th>
                                <th>Time Out</th>
                                <th>Time In</th>
                                <th>Total</th>
                            </tr>

                        </thead>

                        <tbody>

                        @for (int index = 0; index < schedulerVM.AircraftEquipmentsTimeList.Count(); index++)
                        {
                            int indexValue = index;

                            AircraftScheduleHobbsTime aircraftScheduleHobbsTime = schedulerVM.AircraftEquipmentHobbsTimeList.Where(p => p.AircraftEquipmentTimeId == schedulerVM.AircraftEquipmentsTimeList[index].Id).FirstOrDefault();
                            <tr>
                                <td class="e-textlabel">@schedulerVM.AircraftEquipmentsTimeList[index].EquipmentName</td>
                                <td>

                                    @schedulerVM.AircraftEquipmentsTimeList[index].Hours

                                    <RadzenNumeric Visible="false" @bind-Value=@schedulerVM.AircraftEquipmentsTimeList[indexValue].Hours Class="w-100" />

                                </td>

                                <td>
                                    @if (aircraftScheduleHobbsTime == null)
                                    {
                                        <RadzenNumeric style="width: 70%;" Name="@schedulerVM.AircraftEquipmentsTimeList[index].EquipmentName" TValue="decimal"
                                               Placeholder="Please enter hours" @oninput="@(args => TextBoxChangeEvent(args, indexValue))" />
                                    }
                                    else
                                    {
                                        <RadzenNumeric style="width: 70%;" @bind-Value="@aircraftScheduleHobbsTime.InTime" Name="@schedulerVM.AircraftEquipmentsTimeList[index].EquipmentName" TValue="decimal"
                                               Placeholder="Please enter hours" @oninput=@(args => EditFlightTimeTextBoxChangeEvent(args, indexValue)) />
                                    }

                                    <RadzenCompareValidator Value="@schedulerVM.AircraftEquipmentsTimeList[indexValue].Hours"
                                                        Component="@schedulerVM.AircraftEquipmentsTimeList[index].EquipmentName"
                                                        Style="position: relative" Text="Time in value must be greater than time out" Operator=CompareOperator.GreaterThan />
                                </td>

                                <td>
                                    @schedulerVM.AircraftEquipmentsTimeList[index].TotalHours
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>

                <div>
                    <div class="row" style="text-align:right">
                        <div class="col">
                            <RadzenButton Text="Check In" ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"
                                          BusyText="Checking In..." Class="mr-1" Style="width: 163px;" />

                            <RadzenButton Text="Cancel" Click="() => OpenMainForm()" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" Style="width: 120px;" />
                        </div>
                    </div>
                </div>

            </RadzenTemplateForm>
            }
        </Content>
    </DialogTemplates>

</SfDialog>

<SfDialog ID="DeleteDialog" Width="360px" MinHeight="150px" Target="Body" ShowCloseIcon="true" @bind-Visible="@isVisibleDeleteDialog">

    <DialogTemplates>

        <Header> Delete Appointment </Header>

        <Content>

            <div>
                <p class="mb-4">Are you sure, You want to delete appointment?</p>
                <div class="row" style="text-align:right">
                    <div class="col">
                        <RadzenButton Text="Yes" ButtonStyle="ButtonStyle.Primary" Click="() => DeleteAsync() " BusyText="Deleting ..." IsBusy=@isBusyDeleteButton Class="mr-1" Style="width: 80px;" />
                        <RadzenButton Text="No" Click="() => CloseChildDialog()" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" Style="width: 80px;" />
                    </div>
                </div>
            </div>

        </Content>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

@{

    async Task OpenDeleteDialog()
    {
        dialogVisibility = false;
        var result = await DialogService.OpenAsync("Delete", ds =>
    @<div>
        <p class="mb-4">Are you sure, You want to delete appointment ?</p>
        <div class="row" style="text-align:right">
            <div class="col">
                <RadzenButton Text="Yes" ButtonStyle="ButtonStyle.Danger" Click="() => DeleteAsync() " BusyText="Deleting ..." IsBusy=@isBusyDeleteButton Class="mr-1" Style="width: 80px;" />
                <RadzenButton Text="No" Click="() => CloseChildDialog()" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" Style="width: 80px;" />

            </div>
        </div>
    </div>
    , new DialogOptions { Width = "360px" });

    }

    async Task UnCheckOut()
    {
        dialogVisibility = false;
        var result = await DialogService.OpenAsync("Un-Check out appointment", ds =>
    @<div>
        <p class="mb-4">Are you sure, You want to un-check out appointment ?</p>
        <div class="row" style="text-align:right">
            <div class="col">
                <RadzenButton Text="Un-Checkout" ButtonStyle="ButtonStyle.Primary" Click="() => UnCheckOutAppointment() " BusyText="un-checking out ..." IsBusy=@isBusyUnCheckOutButton Class="mr-1" Style="width: 160px;" />
                <RadzenButton Text="Cancel" Click="() => CloseChildDialog()" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" Style="width: 80px;" />

            </div>
        </div>
    </div>
    , new DialogOptions { Width = "360px" });

    }
}