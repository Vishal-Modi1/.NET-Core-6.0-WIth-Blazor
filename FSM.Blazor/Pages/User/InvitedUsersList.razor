@namespace FSM.Blazor.Pages.User
@using DataModels.Enums
@using FSM.Blazor.Data.InviteUser
@using DataModels.VM.User
@using Configuration;
@using FSM.Blazor.Utilities;
@using FSM.Blazor.Shared.Components;

@inject InviteUserService InviteUserService
@layout MainLayout

@page "/InvtedUsersList"

@if (string.IsNullOrWhiteSpace(ParentModuleName))
{
    <PageTitle>User | Fly Manager </PageTitle>
}


<div class="row">
    <div class="col">
        <h2 style="float:left">Manage Invited Users Details</h2>

        @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, @moduleName))
        {
            <RadzenButton Style="float:right" Text="Invite User" BusyText="Inviting ..." IsBusy="@isBusyAddNewButton"
                      Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" Click=@(() => InviteUserDialog(0, "Invite User")) />
        }

    </div>
</div>

<div class="row" style="margin-bottom:22px;">
    <div class="col-md-4">
        <RadzenDropDown @bind-Value="@RoleId" Style="width:100%;" TValue="int"
                        @ref="roleFilter" TextProperty="Name" Placeholder="Select Role"
                        Data="@RoleFilterDropdown" Change="@(args =>  grid.Reload())"
                        Name="RoleId" ValueProperty="Id" AllowClear="true">
        </RadzenDropDown>
    </div>

    @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result && ParentModuleName != Module.Company.ToString())
    {
        <div class="col-md-4">
            <RadzenDropDown @bind-Value="@CompanyId" Style="width:100%;" TValue="int"
                        TextProperty="Name" Placeholder="Select Company"
                        Data="@CompanyFilterDropdown" Change="@(args =>  grid.Reload())"
                        Name="CompanyId" ValueProperty="Id" AllowClear="true">
            </RadzenDropDown>
        </div>
    }

    <div class="col-md-4">
        <RadzenTextBox style="width: 100%;" Name="SearchText" Change="@(args =>  grid.Reload())"
                       Placeholder="Search User" @bind-Value="@searchText" />
    </div>

</div>

<RadzenDataGrid AllowFiltering="true" @ref="grid" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Simple" AllowPaging="true" IsLoading="@isLoading"
                PageSize="@pageSize" ShowPagingSummary="true"
                AllowSorting="true" Data="@data" TItem="InviteUserDataVM"
                PageSizeOptions="@pageSizeOptions"
                Count="@count" LoadData="@LoadData"
                PagingSummaryFormat="@pagingSummaryFormat">
    <Columns>

        <RadzenDataGridColumn Width="50px" TItem="InviteUserDataVM" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="value">
                @(data.IndexOf(value) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="InviteUserDataVM" Filterable="false" Property="Email" Title="Email"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="InviteUserDataVM" Filterable="false" Property="Role" Title="Role"></RadzenDataGridColumn>


        <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="160px" Sortable="false" Filterable="false" TItem="InviteUserDataVM" Property="Id" Title="Actions">
            <Template Context="data">

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, moduleName))
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="mode_edit" Class="m-1"
                              Click=@(() => InviteUserDialog(data.Id, "Edit Invited User Details")) IsBusy="@data.IsLoadingEditButton" />
                }

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete_sweep" Class="m-1"
                              Click=@(args => OpenDeleteDialog(data)) />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" Width="600px"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>
            @if (operationType == OperationType.Delete)
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to delete <b> @(userData.Email) </b> Invitation?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                            {
                                <RadzenButton Text="Yes" ButtonStyle="ButtonStyle.Danger" Click="() => DeleteAsync(userData.Id) " Class="mr-1" Style="width: 80px;" />
                            }

                            <RadzenButton Text="No" Click="@(() => isDisplayPopup = false)" ButtonStyle="ButtonStyle.Light" Class="mr-1" Style="width: 80px;" />

                        </div>
                    </div>
                </div>
            }
            else
            {
                <FSM.Blazor.Pages.User.InviteUser InviteUserVM="@userData" CloseDialogCallBack="@CloseDialog"></FSM.Blazor.Pages.User.InviteUser>
            }

        </Body>
    </CustomPopupComponent>
}
