@namespace Web.UI.Pages.Discrepancy
@using DataModels.Enums
@using DataModels.VM.Discrepancy
@using Telerik.Blazor
@using Web.UI.Shared.Components

@page "/Discrepancy"

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between">
            <div>
                <ComponentTitle Title="Discrepancies" />
            </div>
            <div>
                
                    <div class="col-md-4">
                        <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => OpenCreateDialog(new DiscrepancyDataVM())">
                            <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                        </TelerikButton>
                    </div>
                
            </div>
        </div>
        <hr class="mt-2 my-1" />
    </div>
</div>
<div class="row">
    <div class="col d-flex justify-content-between my-2">
        <div class="col-md-4">
            <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Discrepancy" ValueChanged="@( (string value) => OnSearchValueChanges<DiscrepancyDataVM>(value, grid) )" />
        </div>
    </div>
</div>

<div style="position: relative; width:100%; min-height: 400px;">
    <TelerikLoaderContainer OverlayThemeColor="light"
                            Visible="@(isGridDataLoading)"
                            Text="@null" Class="initial-data-loader">
        <Template>
            <TelerikLoader Type="@LoaderType.InfiniteSpinner"
                           Size="@(ThemeConstants.Loader.Size.Large)">
            </TelerikLoader>
        </Template>
    </TelerikLoaderContainer>

    <TelerikGrid TItem="DiscrepancyDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
                 Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

        <GridSettings>
            <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
        </GridSettings>

        <GridColumns>

            <GridColumn Field="@nameof(DiscrepancyDataVM.ReportedByUser)" Title="Reported By" />
            <GridColumn Field="@nameof(DiscrepancyDataVM.Status)" Sortable="false" />

            <GridCommandColumn Context="dataItem" Title="Action">
                @{
                    DiscrepancyDataVM discrepancyDataVM = dataItem as DiscrepancyDataVM;

                        <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>OpenCreateDialog(discrepancyDataVM)"
                               ThemeColor="success" Enabled=!discrepancyDataVM.IsLoadingEditButton>

                            <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                            <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light"
                                   Visible="discrepancyDataVM.IsLoadingEditButton">
                            </TelerikLoader>

                        </TelerikButton>
                        //<TelerikButton Class="btn k-btn-grid-delete mx-1" ThemeColor="error" OnClick="()=>OpenDeleteDialog(companyVM)">
                        //    <CustomIcons IconName="grid-delete" PrimaryColor="white"></CustomIcons>
                        //</TelerikButton>
                }
            </GridCommandColumn>

        </GridColumns>

    </TelerikGrid>

</div>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Create discrepancyData="@discrepancy" CloseDialogCallBack="@CloseDialog"></Create>
            }
            else
            {
                //Delete popup
            @*    <div>
                    <p class="mb-4">Are you sure, You want to remove <b> @_companyData.Name </b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            <TelerikButton Class="btn k-btn-danger" OnClick="() => DeleteAsync(_companyData.Id)" Enabled="@(!isBusyDeleteButton)">
                                Yes
                                <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyDeleteButton">
                                </TelerikLoader>
                            </TelerikButton>

                            <TelerikButton ThemeColor="secondary" Class="btn k-btn-secondary" OnClick="() => isDisplayPopup = false">
                                No
                            </TelerikButton>

                        </div>
                    </div>
                </div>*@
            }
        </Body>
    </CustomPopupComponent>
}