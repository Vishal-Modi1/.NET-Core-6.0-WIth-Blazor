@namespace Web.UI.Pages.UserRolePermission
@using DataModels.Enums
@using DataModels.VM.UserRolePermission
@using Web.UI.Utilities;
@using Configuration;

@layout TelerikLayout

@page "/UserRolePermission"


<div class="row">
    <div class="col">
        <h2 style="float:left">Manage Users Permissions</h2>
    </div>
</div>

<div class="row" style="margin-bottom:22px;">
    <div class="col-md-4">

        <TelerikComboBox Id=roleId Data="@userrolePermissionFilterVM.UserRoles" TextField="Name" ValueChanged="@( (int value) => OnRoleValueChanges(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Role" ValueField="Id">
        </TelerikComboBox>

    </div>

    @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result)
    {
        <div class="col-md-4">

            <TelerikComboBox Id=companyId Data="@userrolePermissionFilterVM.Companies" TextField="Name" ValueChanged="@( (int value) => OnCompanyValueChanges(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Company" ValueField="Id">
            </TelerikComboBox>

        </div>
    }

    <div class="col-md-4">

        <TelerikComboBox Id=moduleId Data="@userrolePermissionFilterVM.ModuleList" TextField="Name" ValueChanged="@( (int value) => OnModuleValueChanges(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Module" ValueField="Id">
        </TelerikComboBox>

    </div>

</div>

<TelerikGrid TItem="UserRolePermissionDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
             Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler"
             SelectionMode="GridSelectionMode.Multiple" >

    <GridSettings>

        <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>

    </GridSettings>

    <GridColumns>

        <GridColumn Field="@nameof(UserRolePermissionDataVM.RoleName)" Title="Role"></GridColumn>
        <GridColumn Field="@nameof(UserRolePermissionDataVM.DisplayName)" Title="Module"></GridColumn>
        <GridColumn Field="@nameof(UserRolePermissionDataVM.PermissionType)" Title="Permission Type"></GridColumn>

         <GridCheckboxColumn SelectAll="true" CheckBoxOnlySelection="true" Title="Select" Width="70px" />

        @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result)
        {
            <GridColumn Field="@nameof(UserRolePermissionDataVM.CompanyName)" Title="Company"></GridColumn>
        }

        @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, @moduleName))
        {

            //<RadzenDataGridColumn TItem="UserRolePermissionDataVM" Filterable="false" Property="IsAllowed">
            //    <HeaderTemplate>
            //        <RadzenCheckBox TriState="false" Name="WebPermissions" TValue="bool" Value="@isAllow" Change="@(args => OpenUpdateUserPermissionsDialog(args,true))" Title="Is Allowed" />
            //        <RadzenLabel Text="Web Permissions" Component="WebPermissions" Style="margin-left: 5px;margin-bottom: 10px;" />
            //    </HeaderTemplate>
            //    <Template Context="value">
            //        <RadzenCheckBox TriState="false" Value="@(value.IsAllowed)" TValue="bool" Change="@(args => OpenUpdateUserPermissionDialog(args, value, true))" />
            //    </Template>
            //</RadzenDataGridColumn>

            //<RadzenDataGridColumn TItem="UserRolePermissionDataVM" Filterable="false" Property="IsAllowed">
            //    <HeaderTemplate>

            //        <RadzenCheckBox TriState="false" Name="MobileAppPermissions" TValue="bool" Value="@isAllowForMobileApp" Change="@(args => OpenUpdateUserPermissionsDialog(args, false))" Title="Is Allowed" />
            //        <RadzenLabel Text="Mobile App Permissions" Component="MobileAppPermissions" Style="margin-left: 5px;margin-bottom: 10px;" />

            //    </HeaderTemplate>
            //    <Template Context="value">
            //        <RadzenCheckBox TriState="false" Value="@(value.IsAllowedForMobileApp)" TValue="bool" Change="@(args => OpenUpdateUserPermissionDialog(args, value, false))" />
            //    </Template>
            //</RadzenDataGridColumn>
        }

    </GridColumns>

</TelerikGrid>

@*@if (isDisplayPopup)
//{
//    <CustomPopupComponent Title="@popupTitle"
//                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
//                      CloseOnOutsideClick="false"
//                      OnClose="@(()=> {isDisplayPopup = false;})">
//        <Body>

//            @if (operationType == OperationType.ActivateDeActivate)
//            {
//                <div>
//                    <p class="mb-4">  @(message + " ")  <b> @(userRolePermissionDataVM.PermissionType + " permission to " +  userRolePermissionDataVM.RoleName + " for " + userRolePermissionDataVM.ModuleName + " module") </b>?</p>

//                    <div class="row" style="text-align:right">
//                        <div class="col">

//                            <RadzenButton Text="Yes" ButtonStyle="ButtonStyle.Primary" Class="mr-1" Style="width: 80px;" Click="() => UpdatePermissionAsync(userRolePermissionDataVM.IsAllowed,userRolePermissionDataVM.Id, isForWebApp)" />
//                            <RadzenButton Text="No" Click="() => RevokeUserStatusChange()" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" Style="width: 80px;" />

//                        </div>
//                    </div>
//                </div>
//            }
//            else if (operationType == OperationType.ActivateDeActivateInBulk)
//            {
//                <div>
//                    <p class="mb-4">  @(message)  </p>

//                    <div class="row" style="text-align:right">
//                        <div class="col">

//                            <RadzenButton Text="Yes" ButtonStyle="ButtonStyle.Primary" Class="mr-1" Style="width: 80px;" Click="() => UpdatePermissionsAsync(userRolePermissionDataVM.IsAllowed, isForWebApp)" />
//                            <RadzenButton Text="No" Click="() => RevokeUserStatusChange()" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" Style="width: 80px;" />

//                        </div>
//                    </div>
//                </div>
//            }

//        </Body>
//    </CustomPopupComponent>
//}*@
