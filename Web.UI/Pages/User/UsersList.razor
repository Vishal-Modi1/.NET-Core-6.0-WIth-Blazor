@namespace Web.UI.Pages.User
@using DataModels.Enums
@using Web.UI.Data.User
@using DataModels.VM.User
@using Configuration;
@using Web.UI.Utilities;
@using Web.UI.Shared.Components;

@layout TelerikLayout

@page "/UsersList"

@if (string.IsNullOrWhiteSpace(ParentModuleName))
{
    <PageTitle>User | Fly Manager </PageTitle>
}

<div class="row">
    <div class="col d-flex justify-content-between">
        <div><h4>Manage Users Details</h4></div>
        <div>
            <div class="row d-flex justify-content-end m-2">
                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName) || true)
                {
                    <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => UserCreateDialog(new UserDataVM())" Enabled="@(!isBusyAddButton)">
                        <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                        </TelerikLoader>
                        Add <CustomIcons IconName="add"></CustomIcons>
                    </TelerikButton>
                }
            </div>
        </div>
    </div>
</div>

<div class="row" style="margin-bottom:22px;">
    <div class="col-md-4">
        <TelerikComboBox Id=roleId Data="@userFilterVM.UserRoles" TextField="Name" ValueChanged="@( (int value) => OnRoleValueChanges(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Role" ValueField="Id">
        </TelerikComboBox>

    </div>

    @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result && ParentModuleName != Module.Company.ToString())
    {
        <div class="col-md-4">

            <TelerikComboBox Id=companyId Data="@userFilterVM.Companies" TextField="Name" 
            ValueChanged="@( (int value) => OnCompanyValueChanges(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Company" ValueField="Id">
            </TelerikComboBox>

        </div>
    }

    <div class="col-md-4">
        <TelerikTextBox Name="SearchText" PlaceHolder="Search User" ValueChanged="@( (string value) => OnSearchValueChanges<UserDataVM>(value, grid) )" />
    </div>

</div>

<TelerikGrid TItem="UserDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
             Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

    <GridSettings>
        <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
    </GridSettings>

    <GridColumns>

        <GridColumn Context="dataItem" Title="Photo" Sortable="true">
            <Template>
                @{
                    var data = dataItem as UserDataVM;
                    <img class="rounded" onerror="this.onerror=null;this.src='../img/thumbnail-userprofile.png';"
                         src="@data.ProfileImage" style="width: 45px; height: 45px; border-radius: 22px !important;" />
                }

            </Template>
        </GridColumn>

        <GridColumn Field="@nameof(UserDataVM.FirstName)" Title="First Name" Sortable="true"></GridColumn>
        <GridColumn Field="@nameof(UserDataVM.LastName)" Title="Last Name" Sortable="true"></GridColumn>
        <GridColumn Field="@nameof(UserDataVM.Email)" Title="Email" Sortable="true"></GridColumn>
        <GridColumn Field="@nameof(UserDataVM.UserRole)" Title="User Role" Sortable="true"></GridColumn>
        <GridColumn Field="@nameof(UserDataVM.CompanyName)" Title="Company Name" Sortable="true"></GridColumn>

        <GridColumn Context="dataItem" Title="Status" Sortable="true">
            <Template>
                @{
                    var data = dataItem as UserDataVM;
                    <TelerikCheckBox TValue="bool" OnChange="() => OpenUpdateUserStatusDialog(data)"
                                 Id="@("chkIsActive"+ data.Id)" @bind-Value="@(data.IsActive)" />

                }

            </Template>
        </GridColumn>

        <GridCommandColumn Context="dataItem" Title="Action">
            @{
                popupTitle = "Update User Details";
                UserDataVM userData = dataItem as UserDataVM;

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, moduleName))
                {
                    <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>UserCreateDialog(userData)"
                           ThemeColor="success" Enabled=!userData.IsLoadingEditButton>

                        <CustomIcons IconName="edit"></CustomIcons>
                        <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="userData.IsLoadingEditButton">
                        </TelerikLoader>

                    </TelerikButton>
                }

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                {
                    <TelerikButton Class="btn k-btn-grid-delete mx-1" ThemeColor="error" OnClick="()=>OpenDeleteDialog(userData)">
                        <CustomIcons IconName="delete"></CustomIcons>
                    </TelerikButton>
                }
            }
        </GridCommandColumn>

    </GridColumns>

</TelerikGrid>


@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" Width="600px"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Create userData="@userData" CloseDialogCallBack="@CloseDialog"></Create>
            }
            else if (operationType == OperationType.Delete)
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to delete <b> @(userData.FirstName + " " +  @userData.LastName) </b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                            {
                                <TelerikButton Class="btn k-btn-danger" ThemeColor="error" OnClick="()=>DeleteAsync(userData.Id)">
                                    Yes
                                </TelerikButton>

                            }

                            <TelerikButton Class="btn k-btn-secondary" ThemeColor="secondary" OnClick="()=>isDisplayPopup = false">
                                No
                            </TelerikButton>
                        </div>
                    </div>
                </div>
            }
            else if (operationType == OperationType.ActivateDeActivate)
            {
                <div>
                    <p class="mb-4"> @message <b> @(userData.FirstName + " " + userData.LastName) </b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, moduleName))
                            {
                                <TelerikButton Class="mr-1 btn k-btn-grid-primary" ThemeColor="info" OnClick="()=>UpdateIsUserActiveAsync(userData.IsActive,userData.Id)">
                                    Yes
                                    <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="isBusyUpdateStatusButton">
                                    </TelerikLoader>
                                </TelerikButton>
                            }

                            <TelerikButton Class="mr-1 btn k-btn-secondary" ThemeColor="secondary" OnClick="()=>RevokeUserStatusChange()">
                                No
                            </TelerikButton>
                        </div>
                    </div>
                </div>
            }
        </Body>
    </CustomPopupComponent>
}
