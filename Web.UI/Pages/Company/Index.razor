@namespace Web.UI.Pages.Company
@using DataModels.Enums
@using DataModels.VM.Company
@using Telerik.Blazor;
@using Web.UI.Shared.Components;
@page "/Company"

<div class="row">
    <div class="col d-flex justify-content-between">
        <div>
            <ComponentTitle Title="Manage Companies Details" Type="AdministrationTitle" />
        </div>
        <div>
            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName) || true)
            {
                <div class="col-md-4">
                    <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => CompanyCreateDialog(new CompanyVM())">
                        <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                    </TelerikButton>
                </div>
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col d-flex justify-content-between my-2">
        <div class="col-md-4">
            <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Company" ValueChanged="@( (string value) => OnSearchValueChanges<CompanyVM>(value, grid) )" />
        </div>
    </div>
</div>

<div style="position: relative; width:100%; min-height: 400px;">
    <TelerikLoaderContainer OverlayThemeColor="light"
                            Visible="@(isGridDataLoading)"
                            Text="@null" Class="initial-data-loader">
        <Template>
            <TelerikLoader Type="@LoaderType.InfiniteSpinner"
                           Size="@(ThemeConstants.Loader.Size.Large)">
            </TelerikLoader>
        </Template>
    </TelerikLoaderContainer>

    <TelerikGrid TItem="CompanyVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
                 Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

        <GridSettings>
            <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
        </GridSettings>

        <GridColumns>

            <GridColumn Context="dataItem" Title="Logo" Width="80px">
                <Template>
                    @{
                        var data = dataItem as CompanyVM;
                        <img class="rounded" onerror="this.onerror=null;this.src='../img/company-default-logo.png';"
                             src="@data.LogoPath" style="width: 45px; height: 45px; border-radius: 22px !important;" />
                    }

                </Template>
            </GridColumn>

            <GridColumn Field="@nameof(CompanyVM.Name)" Title="Company Name" Sortable="true">
                <Template>
                    @{
                        var data = context as CompanyVM;
                        <u> <a href="javascript:void(0)" style="color:#1151F3" @onclick="@((ui) => OpenCompanyDetailPage(data))">@data.Name</a></u>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(CompanyVM.Address)" />
            <GridColumn Field="@nameof(CompanyVM.TimeZone)" />
            <GridColumn Field="@nameof(CompanyVM.ContactNo)" />
            <GridColumn Field="@nameof(CompanyVM.Website)" />

            <GridCommandColumn Context="dataItem" Title="Action">
                @{
                    CompanyVM companyVM = dataItem as CompanyVM;

                    <TelerikButton Class="btn k-btn-primary mx-1" OnClick="()=>OpenCompanyDetailPage(companyVM)">
                        <CustomIcons IconName="settings" PrimaryColor="white"></CustomIcons>
                    </TelerikButton>

                    @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, moduleName))
                    {
                        <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>CompanyCreateDialog(companyVM)"
                               ThemeColor="success" Enabled=!companyVM.IsLoadingEditButton>

                            <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                            <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light"
                                   Visible="companyVM.IsLoadingEditButton">
                            </TelerikLoader>

                        </TelerikButton>
                    }

                    // TODO:
                    @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                    {
                        <TelerikButton Class="btn k-btn-grid-delete mx-1" ThemeColor="error" OnClick="()=>OpenDeleteDialog(companyVM)">
                            <CustomIcons IconName="grid-delete" PrimaryColor="white"></CustomIcons>
                        </TelerikButton>
                    }
                }
            </GridCommandColumn>

        </GridColumns>

    </TelerikGrid>

</div>


@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Create companyData=@(_companyData) CloseDialogCallBack="@CloseDialog"></Create>
            }
            else
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to remove <b> @_companyData.Name </b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            <TelerikButton Class="btn k-btn-danger" OnClick="() => DeleteAsync(_companyData.Id)" Enabled="@(!isBusyDeleteButton)">
                                Yes
                                <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyDeleteButton">
                                </TelerikLoader>
                            </TelerikButton>

                            <TelerikButton ThemeColor="secondary" Class="btn k-btn-secondary" OnClick="() => isDisplayPopup = false">
                                No
                            </TelerikButton>

                        </div>
                    </div>
                </div>
            }
        </Body>
    </CustomPopupComponent>
}