@namespace Web.UI.Pages.Company
@using DataModels.Enums
@using DataModels.VM.Company
@using Telerik.Blazor;

@page "/Company"

@layout TelerikLayout

<div class="row">
    <div class="col d-flex justify-content-between">
        <div><h4>Manage Companies Details</h4></div>
        <div>
            <div class="row d-flex justify-content-end my-2">
                <div class="col-md-8">
                    <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Company" @bind-Value="@searchText" />
                </div>

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName) || true)
                {
                    <div class="col-md-4">
                        <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => CompanyCreateDialog(new CompanyVM())">
                            Add New
                        </TelerikButton>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<TelerikGrid TItem="CompanyVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
             Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

    <GridSettings>
        <GridPagerSettings InputType="PagerInputType.Input"
                           PageSizes="@pageSizeOptions"
                           ButtonCount="5"
                           Adaptive="true">
        </GridPagerSettings>
    </GridSettings>

    <GridColumns>

        <GridColumn Context="dataItem" Title="Photo" Sortable="true">
            <Template>
                @{
                    var data = dataItem as CompanyVM;
                    <img class="rounded" onerror="this.onerror=null;this.src='../img/company-default-logo.png';"
                         src="@data.Logo" style="width: 45px; height: 45px; border-radius: 22px !important;" />
                }

            </Template>
        </GridColumn>

        <GridColumn Field="@nameof(CompanyVM.Name)" Title="Company Name" Sortable="true">
            <Template>
                @{
                    var data = context as CompanyVM;
                    <u> <a href="javascript:void(0)" @onclick="@((ui) => OpenCompanyDetailPage(data))">@data.Name</a></u>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(CompanyVM.Address)" Sortable="false" />
        <GridColumn Field="@nameof(CompanyVM.TimeZone)" Sortable="false" />
        <GridColumn Field="@nameof(CompanyVM.ContactNo)" Sortable="false" />
        <GridColumn Field="@nameof(CompanyVM.Website)" Sortable="false" />

        <GridCommandColumn Context="dataItem" Title="Action">
            @{
                CompanyVM companyVM = dataItem as CompanyVM;

                <TelerikButton Class="btn k-btn-primary mx-1" OnClick="()=>OpenCompanyDetailPage(companyVM)">
                    <CustomIcons IconName="settings"></CustomIcons>
                </TelerikButton>

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, moduleName))
                {
                    <TelerikButton Class="btn k-btn-grid-edit mx-1" ThemeColor="success" OnClick="()=>CompanyCreateDialog(companyVM)" Enabled=!companyVM.IsLoadingEditButton>
                        <CustomIcons IconName="edit"></CustomIcons>
                        <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="companyVM.IsLoadingEditButton">
                        </TelerikLoader>
                    </TelerikButton>
                }

                // TODO:
                //@if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                //  {
                <TelerikButton Class="btn k-btn-grid-delete mx-1" ThemeColor="error"  OnClick="()=>OpenDeleteDialog(companyVM)">
                    <CustomIcons IconName="delete"></CustomIcons>
                </TelerikButton>
                //   }
            }
        </GridCommandColumn>

    </GridColumns>

</TelerikGrid>


@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Create companyData=@(_companyData) CloseDialogCallBack="@CloseDialog"></Create>
            }
            else
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to remove <b> @_companyData.Name </b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            <TelerikButton Class="btn k-btn-danger" OnClick="() => DeleteAsync(_companyData.Id)" Enabled="@(!isBusyDeleteButton)">
                                Yes
                                <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyDeleteButton">
                                </TelerikLoader>
                            </TelerikButton>

                            <TelerikButton ThemeColor="secondary" Class="btn k-btn-secondary" OnClick="() => isDisplayPopup = false">
                                No
                            </TelerikButton>

                        </div>
                    </div>
                </div>
            }
        </Body>
    </CustomPopupComponent>
}