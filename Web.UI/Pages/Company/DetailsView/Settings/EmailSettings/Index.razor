@namespace Web.UI.Pages.Company.DetailsView.Settings.Notifications
@using DataModels.Enums
@using DataModels.VM.EmailConfiguration
@using Telerik.Blazor
@using Web.UI.Shared.Components

@page "/EmailConfiguration"

    <Web.UI.Pages.Company.DetailsView.Settings.Notifications.Create emailConfigurationData="@emailConfiguration" CloseDialogCallBack="@CloseDialog">
    </Web.UI.Pages.Company.DetailsView.Settings.Notifications.Create>

@*else
{
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between">
                <div>
                    <ComponentTitle Title="Email Configurations" Type="AdministrationTitle" />
                </div>
                <div>
                    <div class="col-md-4">
                        <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" Enabled="@(!isBusyAddButton)"
                                   OnClick="() => OpenCreateDialog(new EmailConfigurationDataVM())">
                            <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                            <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                            </TelerikLoader>
                        </TelerikButton>
                    </div>

                </div>
            </div>
            <hr class="mt-2 my-1" />
        </div>
    </div>

    <div class="row my-2">

        <div class="col-md-3 my-1">
            <TelerikComboBox Id=statusId Data="@Statuses" TextField="Name" Value="@statusId"
                ValueChanged="@( (int value) => OnStatusValueChange(value) )"
                Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                Placeholder="Select Status" ValueField="Id" ClearButton="false">
                </TelerikComboBox>
        </div>
        <div class="col-md-3 my-1">
            <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Email" ValueChanged="@( (string value) => OnSearchValueChanges<EmailConfigurationDataVM>(value, grid) )" />
        </div>
    </div>

    <TelerikGrid TItem="EmailConfigurationDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
             Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler"
             SelectionMode="@GridSelectionMode.Single">

        <GridSettings>
            <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
        </GridSettings>

        <GridColumns>

            <GridColumn Field="@nameof(EmailConfigurationDataVM.Email)" Title="Email" />
            <GridColumn Field="@nameof(EmailConfigurationDataVM.EmailType)" Title="Email Type" />

            @if (globalMembers.IsSuperAdmin)
            {
                <GridColumn Field="@nameof(EmailConfigurationDataVM.CompanyName)" Title="Company" />
            }
            <GridCommandColumn Context="dataItem" Title="Action">
                @{
                    EmailConfigurationDataVM emailConfigurationDataVM = dataItem as EmailConfigurationDataVM;

                    <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>OpenCreateDialog(emailConfigurationDataVM)"
                           ThemeColor="success" Enabled=!emailConfigurationDataVM.IsLoadingEditButton>

                        <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                        <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light"
                               Visible="emailConfigurationDataVM.IsLoadingEditButton">
                        </TelerikLoader>

                    </TelerikButton>

                }
            </GridCommandColumn>

        </GridColumns>

    </TelerikGrid>

    @if (isDisplayPopup)
    {
        <CustomPopupComponent Title="@popupTitle"
                      ShowHeaderCloseButton="@true"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" OnClose="@(()=> {isDisplayPopup = false;})">
            <Body>

                @if (operationType == OperationType.Create || operationType == OperationType.Edit)
                {
                    <Web.UI.Pages.Company.DetailsView.Settings.EmailSettings.Create emailConfigurationData="@emailConfiguration" CloseDialogCallBack="@CloseDialog">
                    </Web.UI.Pages.Company.DetailsView.Settings.EmailSettings.Create>
                }
            </Body>
        </CustomPopupComponent>
    }
}*@