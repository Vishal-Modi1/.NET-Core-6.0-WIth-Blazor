@namespace Web.UI.Pages.Location
@using DataModels.Enums
@using Web.UI.Data.Location
@using Web.UI.Data.Timezone
@using DataModels.VM.Location
@using Web.UI.Utilities;
@using Configuration;
@using Web.UI.Shared.Components;

@layout TelerikLayout

@page "/Location"
<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between">
            <div>
                <ComponentTitle Title="Locations" Type="AdministrationTitle" />
            </div>
            <div>
                <div class="col-md-4">
                    <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => LocationCreateDialog(new LocationDataVM())" Enabled="@(!isBusyAddButton)">
                        <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                        </TelerikLoader>
                        <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                    </TelerikButton>
                </div>
            </div>
        </div>
        <hr class="mt-2 my-1" />
    </div>
</div>
<div class="row my-2">
    <div class="col-md-4">
        <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Location" ValueChanged="@( (string value) => OnSearchValueChanges<LocationDataVM>(value, grid) )" />
    </div>
</div>

<TelerikGrid TItem="LocationDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
             Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

    <GridSettings>
        <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
    </GridSettings>

    <GridColumns>

        <GridColumn Field="@nameof(LocationDataVM.AirportCode)" Title="Airport Code" />
        <GridColumn Field="@nameof(LocationDataVM.PhysicalAddress)" Title="Physical Address" />
        <GridColumn Field="@nameof(LocationDataVM.Timezone)" Title="Timezone" />
        <GridColumn Field="@nameof(LocationDataVM.Offset)" Title="Offset" />

        <GridCommandColumn Context="dataItem" Title="Action">
            @{
                LocationDataVM locationDataVM = dataItem as LocationDataVM;

                //   @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, moduleName))
                //   {
                <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>LocationCreateDialog(locationDataVM)"
                           ThemeColor="success">

                    <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                </TelerikButton>
                //   }

                // @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                //  {
                <TelerikButton Class="btn k-btn-grid-delete" ThemeColor="error" OnClick="()=>OpenDeleteDialog(locationDataVM)">
                    <CustomIcons IconName="grid-delete" PrimaryColor="white"></CustomIcons>
                </TelerikButton>
                //  }
            }
        </GridCommandColumn>

    </GridColumns>

</TelerikGrid>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Create locationData="@locationData" CloseDialogCallBack="@CloseDialog"></Create>
            }
            else if (operationType == OperationType.Delete)
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to delete <b> @locationData.AirportCode </b>?</p>

                    <div class="row" style="text-align:right">
                        <div class="col">

                            <TelerikButton Class="btn k-btn-danger" OnClick="() => DeleteAsync(locationData.Id)" Enabled="@(!isBusyDeleteButton)">
                                Yes
                                <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyDeleteButton">
                                </TelerikLoader>
                            </TelerikButton>

                            <TelerikButton ThemeColor="secondary" Class="btn k-btn-secondary" OnClick="() => isDisplayPopup = false">
                                No
                            </TelerikButton>
                        </div>
                    </div>
                </div>
            }

        </Body>
    </CustomPopupComponent>
}
