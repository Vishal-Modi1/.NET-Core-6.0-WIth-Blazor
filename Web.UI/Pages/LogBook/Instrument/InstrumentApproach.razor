@using DataModels.Enums
@using DataModels.VM.LogBook


@foreach (LogBookInstrumentApproachVM logBookInstrumentApproachVM in logBookInstrumentApproachesVMList)
{
    <div class="row my-1" style="margin-bottom:10px !important;">

        <div class="col-1" />

        <div class="col-2">
           <div> <label>Airport</label></div>
            <TelerikTextBox Id="departureAirport" @bind-Value="@logBookInstrumentApproachVM.Airport" Placeholder="Airport"></TelerikTextBox>
        </div>

        <div class="col-2">
          <div>  <label>Approach</label></div>

            <TelerikComboBox Id=approach Data="@Approaches" TextField="Name"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Aircraft" ValueField="Id" @bind-Value="@(logBookInstrumentApproachVM.InstrumentApproachId)">
            </TelerikComboBox>

            <TelerikValidationMessage For="@(() => logBookInstrumentApproachVM.InstrumentApproachId)"></TelerikValidationMessage>

        </div>

        <div class="col-2">
           <div> <label>Runway</label></div>
            <TelerikTextBox Id="runway" @bind-Value="@logBookInstrumentApproachVM.Runway" Placeholder="Runway" />
        </div>

        <div class="col-2 align-self-center">
           <div> <label>Circle To Land</label></div>
            <TelerikCheckBox Id="holds" @bind-Value="@logBookInstrumentApproachVM.IsCircleToLand" />
        </div>

        <div class="col-2">
          <div>  <label>Comments</label></div>
            <TelerikTextBox Id="comments" @bind-Value="@logBookInstrumentApproachVM.Comments" Placeholder="Comments" />
        </div>

        <div class="col-1 align-self-end">

            <TelerikButton Class="btn k-btn-grid-delete mx-2 flex-fill" ThemeColor="error" ButtonType="@ButtonType.Button" OnClick="()=>OpenDeleteDialog(logBookInstrumentApproachVM)">
                <CustomIcons IconName="grid-delete" PrimaryColor="white"></CustomIcons>
            </TelerikButton>
        </div>

    </div>
}

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" Width="600px"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Delete)
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to delete the approach?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            <TelerikButton Class="btn k-btn-danger" ButtonType="@ButtonType.Button" ThemeColor="error" OnClick="()=>DeleteAsync()">
                              <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyDeleteButton">
                                </TelerikLoader>   Yes
                            </TelerikButton>

                            <TelerikButton Class="btn k-btn-secondary" ButtonType="@ButtonType.Button" ThemeColor="secondary" OnClick="()=>isDisplayPopup = false">
                                No
                            </TelerikButton>

                        </div>
                    </div>
                </div>
            }

        </Body>
    </CustomPopupComponent>
}