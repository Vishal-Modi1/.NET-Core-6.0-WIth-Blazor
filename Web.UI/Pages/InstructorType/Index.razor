@namespace Web.UI.Pages.InstructorType
@using DataModels.Enums
@using Web.UI.Data.InstructorType
@using DataModels.VM.InstructorType
@using Configuration;

@layout TelerikLayout
@page "/InstructorType"

<div class="row">

    <div class="col-12">
        <div class="d-flex justify-content-between">
            <div>
                <ComponentTitle Title="Instructor Types" Type="AdministrationTitle" />
            </div>
            <div>
                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName) || true)
                {
                    <div class="col-md-4">
                        <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => InstructorTypeCreateDialog(new InstructorTypeVM())">
                            <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                        </TelerikButton>
                    </div>
                }
            </div>
        </div>
        <hr class="mt-2 my-1" />
    </div>
</div>
<div>
        <CustomCollapseBar Class="my-1"  IsFilterBarVisible="isFilterBarVisible" 
        OnPanelCollapsed="@(() => {isFilterBarVisible = false;})" 
        OnPanelExpanded="@(() => {isFilterBarVisible = true;})">
            <HeaderContent>
                <div class="d-flex justify-content-between" >
                   <span class="my-0">
                    <CustomIcons IconName="search" /> Search
                </span>
                    <span>
                        @if (isFilterBarVisible)
                        {
                            <CustomIcons IconName="plus"/>
                        }
                        else
                        {
                            <CustomIcons IconName="minus"/>
                        }
                    </span>
                </div>
            </HeaderContent>
           <ChildContent>
            <div class="row my-2">
                <div class="col-md-4">
                    <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Company" ValueChanged="@( (string value) => OnSearchValueChanges<InstructorTypeVM>(value, grid) )" />
                </div>
            </div>
        </ChildContent>
        </CustomCollapseBar>
</div>

<TelerikGrid TItem="InstructorTypeVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
             Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

    <GridSettings>
        <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
    </GridSettings>

    <GridColumns>

        <GridColumn Field="@nameof(InstructorTypeVM.Name)" />

        <GridCommandColumn Context="dataItem" Title="Action">
            @{
                InstructorTypeVM instructorTypeVM = dataItem as InstructorTypeVM;

                <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>InstructorTypeCreateDialog(instructorTypeVM)"
                           ThemeColor="success">
                    <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                </TelerikButton>

                <TelerikButton Class="btn k-btn-grid-delete mx-1" ThemeColor="error" OnClick="()=>OpenDeleteDialog(instructorTypeVM)">
                    <CustomIcons IconName="grid-delete" PrimaryColor="white"></CustomIcons>
                </TelerikButton>
            }
        </GridCommandColumn>

    </GridColumns>

</TelerikGrid>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Create InstructorTypeData=@(_instructorTypeData) CloseDialogCallBack="@CloseDialog"></Create>
            }
            else
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to remove <b> @_instructorTypeData.Name </b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            <TelerikButton Class="btn k-btn-danger" OnClick="() => DeleteAsync(_instructorTypeData.Id)" Enabled="@(!isBusyDeleteButton)">
                                Yes
                                <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyDeleteButton">
                                </TelerikLoader>
                            </TelerikButton>

                            <TelerikButton ThemeColor="secondary" Class="btn k-btn-secondary" OnClick="() => isDisplayPopup = false">
                                No
                            </TelerikButton>

                        </div>
                    </div>
                </div>
            }
        </Body>
    </CustomPopupComponent>
}
