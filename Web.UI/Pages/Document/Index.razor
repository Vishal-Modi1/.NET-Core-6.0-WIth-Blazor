@namespace Web.UI.Pages.Document
@using DataModels.Enums
@using DataModels.VM.Document;
@using Web.UI.Utilities
@using Web.UI.Shared.Components;

@page "/Document"

@if (string.IsNullOrWhiteSpace(ParentModuleName))
{
    <PageTitle>Documents | Upflyte </PageTitle>
}
<div class="@(string.IsNullOrWhiteSpace(ParentModuleName) ? "card p-3" : "")">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between">
                <div>
                    <ComponentTitle Title="Documents" Type="AdministrationTitle" />
                </div>
                <div>
                    @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName))
                    {
                        <div class="col-md-4">
                            <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => OpenDocumentCreateDialog(new DocumentDataVM())" Enabled="@(!isBusyAddButton)">
                                <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                                <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                                </TelerikLoader>
                            </TelerikButton>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div>
        <CustomCollapseBar Class="my-1"  IsFilterBarVisible="isFilterBarVisible"
                           OnPanelCollapsed="@(() => {isFilterBarVisible = false;})"
                           OnPanelExpanded="@(() => {isFilterBarVisible = true;})">
            <HeaderContent>
                <div class="d-flex justify-content-between">
                    <span class="my-0">
                    <CustomIcons IconName="search" /> Search
                </span>
                    <span>
                        @if (isFilterBarVisible)
                        {
                            <CustomIcons IconName="plus" />
                        }
                        else
                        {
                            <CustomIcons IconName="minus" />
                        }
                    </span>
                </div>
            </HeaderContent>
            <ChildContent>
                <div class="row my-2">
                    @if (string.IsNullOrWhiteSpace(ParentModuleName) || ParentModuleName == Module.Company.ToString())
                    {
                        <div class="col-md-3 col-sm-12 my-1">

                            <TelerikComboBox Id=moduleId Data="@documentFilterVM.ModulesList" TextField="Name" ValueChanged="@( (int value) => OnModuleValueChanges(value) )"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select Module" ValueField="Id" Class="common-bg">
                            </TelerikComboBox>

                        </div>
                    }

                    @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result && ParentModuleName == "")
                    {
                        <div class="col-md-3 col-sm-12 my-1">
                            <TelerikComboBox Id=companyId Data="@documentFilterVM.Companies" TextField="Name" ValueChanged="@((int value) => OnCompanyValueChanges(value) )"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select Company" ValueField="Id" Class="common-bg">
                            </TelerikComboBox>
                        </div>
                    }

                    <div class="col-md-3 col-sm-12 my-1">
                        <TelerikComboBox Id=userId Data="@documentFilterVM.UsersList" TextField="Name" ValueChanged="@((long value) => OnUserValueChanges(value) )"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select User" ValueField="Id" Class="common-bg">
                        </TelerikComboBox>
                    </div>

                    <div class="col-md-3 col-sm-12 my-1">
                        <TelerikComboBox Id=documentType Data="@documentFilterVM.TypesList" TextField="Name" ValueChanged="@( (string value) => OnTypeValueChanges(value) )"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select Type" ValueField="Name" Class="common-bg">
                        </TelerikComboBox>
                    </div>

                    <div class="col-md-3 col-sm-12 my-1">
                        <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" Class="common-bg" PlaceHolder="Search Document" ValueChanged="@( (string value) => OnSearchValueChanges<DocumentDataVM>(value, grid) )" />
                    </div>
                </div>
            </ChildContent>
        </CustomCollapseBar>
    </div>

    <TelerikGrid TItem="DocumentDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
                 Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

        <GridSettings>
            <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
        </GridSettings>

        <GridColumns>

            <GridColumn Field=@nameof(DocumentDataVM.DisplayName) Context="dataItem" Title="Name" Width="15%">

                <Template>

                    @{
                        DocumentDataVM value = dataItem as DocumentDataVM;

                        <a href="javascript:void(0)" @onclick="@((ui) => OpenDocumentPreviewPopupAsync(value.DocumentPath))">@value.DisplayName</a>
                    }
                </Template>
            </GridColumn>

            <GridColumn Field=@nameof(DocumentDataVM.Type) Context="dataItem" Title="Type" Width="6%" TextAlign="@ColumnTextAlign.Center">

                <Template>
                    @{
                        DocumentDataVM data = dataItem as DocumentDataVM;

                        @if (data.Type == "pdf")
                        {
                            <CustomIcons IconName="pdf"></CustomIcons>
                        }
                        else if (data.Type == "png" || data.Type == "jpg" || data.Type == "jpeg" || data.Type == "svg" ||
                        data.Type == "pjp" || data.Type == "pjpeg" || data.Type == "jfif")
                        {
                            <CustomIcons IconName="image"></CustomIcons>
                        }
                        else
                        {
                            <CustomIcons IconName="documentIcon"></CustomIcons>
                        }
                    }
                </Template>
            </GridColumn>

            <GridColumn Field="@nameof(DocumentDataVM.Size)" Title="Size" Width="7%" />

            @if (string.IsNullOrWhiteSpace(ParentModuleName))
            {
                <GridColumn Field="@nameof(DocumentDataVM.ModuleName)" Title="Module Name" Width="10%" />
            }

            <GridColumn Field="@nameof(DocumentDataVM.CompanyName)" Title="Company" Visible="@(globalMembers.IsSuperAdmin && ParentModuleName != "Company")" Width="10%"></GridColumn>

            @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.Admin).Result || _currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result)
            {
                <GridColumn Field="@nameof(DocumentDataVM.UserName)" Title="User" Width="15%" />
            }

            <GridColumn Field=@nameof(DocumentDataVM.CreatedOn) Context="dataItem" Title="Created On" Width="7%">

                <Template>
                    @{
                        DocumentDataVM value = dataItem as DocumentDataVM;
                        string date = value.CreatedOn.ToShortDateString();

                        <label>@date</label>
                    }
                </Template>
            </GridColumn>


            <GridColumn Field=@nameof(DocumentDataVM.ExpirationDate) Context="dataItem" Title="Expiration Date" Width="7%">

                <Template>

                    @{
                        DocumentDataVM value = dataItem as DocumentDataVM;
                        string date = "-";

                        if (value.ExpirationDate != null)
                        {
                            date = value.ExpirationDate.Value.ToShortDateString();
                        }

                        <label>@date</label>
                    }
                </Template>
            </GridColumn>

            <GridColumn Context="dataItem" Title="Action" Width="20%">

                <Template>

                    <span class="d-flex">
                        @{
                            DocumentDataVM value = dataItem as DocumentDataVM;
                            bool isShareble = !value.IsShareable || (value.LastShareDate != null && value.LastShareDate.Value < DateTime.Now.Date);

                            <TelerikButton Class="btn k-btn-grid-download mx-2 flex-fill" ThemeColor="error"
                                       OnClick="()=>DownloadDocument(value)" Enabled=!value.IsLoadingDownloadButton>
                                <CustomIcons IconName="grid-download" PrimaryColor="white"></CustomIcons>
                                @value.TotalDownloads.ToString()
                                <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="value.IsLoadingDownloadButton">
                                </TelerikLoader>
                            </TelerikButton>

                            <TelerikButton Class="btn k-btn-grid-share mx-2 flex-fill" Enabled="!isShareble" ThemeColor="info" OnClick="()=>OpenShareDocumentDialog(value.Id)">
                                <CustomIcons IconName="grid-share" PrimaryColor="white"></CustomIcons>
                                @value.TotalShares.ToString()
                            </TelerikButton>

                            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, moduleName))
                            {
                                <TelerikButton Class="btn k-btn-grid-edit mx-2 flex-fill" OnClick="()=>OpenDocumentCreateDialog(value)"
                                       ThemeColor="success" Enabled=!value.IsLoadingEditButton>

                                    <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                                    <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light"
                                           Visible="value.IsLoadingEditButton">
                                    </TelerikLoader>

                                </TelerikButton>
                            }

                            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                            {
                                <TelerikButton Class="btn k-btn-grid-delete mx-2 flex-fill" ThemeColor="error" OnClick="()=>OpenDeleteDialog(value)">
                                    <CustomIcons IconName="grid-delete" PrimaryColor="white"></CustomIcons>
                                </TelerikButton>
                            }
                        }
                    </span>

                </Template>
            </GridColumn>

        </GridColumns>

    </TelerikGrid>

</div>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      ShowHeaderCloseButton="operationType == OperationType.DocumentShare || operationType == OperationType.DocumentViewer"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" Width="600px"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Create DocumentData="@documentData" CloseDialogCallBack="@CloseDialog" ParentModuleName="@ParentModuleName"></Create>
            }
            else if (operationType == OperationType.Delete)
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to delete <b> @documentData.DisplayName</b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                            {
                                <TelerikButton Class="btn k-btn-danger" ThemeColor="error" OnClick="()=>DeleteAsync(documentData.Id)">
                                    Yes
                                </TelerikButton>
                            }

                            <TelerikButton Class="btn k-btn-secondary" ThemeColor="secondary" OnClick="()=>isDisplayPopup = false">
                                No
                            </TelerikButton>

                        </div>
                    </div>
                </div>
            }
            else if (operationType == OperationType.DocumentViewer)
            {
                @if (isImageType)
                {
                    <img src="@documentPath" style="max-width:100%;max-height:100%;" />
                }
                else
                {
                    <iframe width="100%" height="520" src="@documentPath" frameborder="0" allowfullscreen></iframe>
                }

            }
            else if (operationType == OperationType.DocumentShare)
            {
                <div class="row">
                    <div class="col-12 p-2 bg-light my-3" style="border-radius:12px;">
                        <div class="d-flex justify-content-end">
                            <span @onclick="(()=>CopyLinkToClipboard(documentDataVM.DocumentPath))">
                                <CustomIcons IconName="duplicate" PrimaryColor="#757575" />
                            </span>
                        </div>
                        <div class="d-flex justify-content-center my-3 mx-3">
                            <a href="@documentDataVM.DocumentPath" target="_blank">@documentDataVM.DocumentPath</a>
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-end">
                    <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="()=>CopyLinkToClipboard(documentDataVM.DocumentPath)">
                        Copy to clipboard
                    </TelerikButton>
                </div>
            }
            else
            {
                <div>
                    <p> No Preview available for selected document.</p>
                </div>
            }
        </Body>
    </CustomPopupComponent>
}
