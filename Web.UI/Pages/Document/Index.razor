@namespace Web.UI.Pages.Document
@using DataModels.Enums
@using DataModels.VM.Document;
@using Web.UI.Utilities
@using Web.UI.Shared.Components;

@page "/Document"

@if (string.IsNullOrWhiteSpace(ParentModuleName))
{
    <PageTitle>Documents | Fly Manager </PageTitle>
}
<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <div>
            <ComponentTitle Title="Manage Documents Details" Type="AdministrationTitle" />
        </div>
        <div>
            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName) || true)
            {
                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName))
                {
                    <div class="col-md-4">
                        <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => DocumentCreateDialog(new DocumentDataVM())" Enabled="@(!isBusyAddButton)">
                            <CustomIcons IconName="upload" PrimaryColor="White"></CustomIcons>
                            Upload <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                            </TelerikLoader>
                        </TelerikButton>
                    </div>
                }
            }
        </div>
    </div>
</div>
<div class="row my-2">
    @if (string.IsNullOrWhiteSpace(ParentModuleName) || ParentModuleName == Module.Company.ToString())
    {
        <div class="col-md-3 col-sm-12 my-1">

            <TelerikComboBox Id=moduleId Data="@documentFilterVM.ModulesList" TextField="Name" ValueChanged="@( (int value) => OnModuleValueChanges(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Module" ValueField="Id">
            </TelerikComboBox>

        </div>
    }

    @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result && ParentModuleName != Module.Company.ToString())
    {
        <div class="col-md-3 col-sm-12 my-1">
            <TelerikComboBox Id=companyId Data="@documentFilterVM.Companies" TextField="Name" ValueChanged="@( (int value) => OnCompanyValueChanges(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Company" ValueField="Id">
            </TelerikComboBox>
        </div>
    }

    <div class="col-md-3 col-sm-12 my-1">
        <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Document" ValueChanged="@( (string value) => OnSearchValueChanges<DocumentDataVM>(value, grid) )" />
    </div>
</div>
<!--OLD CODE-->
<!--
<div class="row">

    <div class="col">

        <h2 style="float:left">Manage Documents Details</h2>

        @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName))
        {
            <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => DocumentCreateDialog(new DocumentDataVM())" Enabled="@(!isBusyAddButton)">
                <CustomIcons IconName="upload" PrimaryColor="White"></CustomIcons> 
               Upload <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                </TelerikLoader>
            </TelerikButton>
        }

    </div>
</div>

<div class="row" style="margin-bottom:22px;">

    @if (string.IsNullOrWhiteSpace(ParentModuleName) || ParentModuleName == Module.Company.ToString())
    {
        <div class="col-md-4">

            <TelerikComboBox Id=moduleId Data="@documentFilterVM.ModulesList" TextField="Name" ValueChanged="@( (int value) => OnModuleValueChanges(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Module" ValueField="Id">
            </TelerikComboBox>

        </div>
    }

    @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result && ParentModuleName != Module.Company.ToString())
    {
        <div class="col-md-4">
            <TelerikComboBox Id=companyId Data="@documentFilterVM.Companies" TextField="Name" ValueChanged="@( (int value) => OnCompanyValueChanges(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Company" ValueField="Id">
            </TelerikComboBox>
        </div>
    }

    <div class="col-md-4">
        <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Document" ValueChanged="@( (string value) => OnSearchValueChanges<DocumentDataVM>(value, grid) )" />
    </div>

</div>
-->

<TelerikGrid TItem="DocumentDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
             Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

    <GridSettings>
        <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
    </GridSettings>

    <GridColumns>

        <GridCommandColumn Context="dataItem" Title="Name">
            @{
                DocumentDataVM value = dataItem as DocumentDataVM;

                <a href="javascript:void(0)" @onclick="@((ui) => OpenDocumentPreviewPopupAsync(value.DocumentPath))">@value.DisplayName</a>
            }
        </GridCommandColumn>

        <GridCommandColumn Context="dataItem" Title="Document Type">
            @{
                DocumentDataVM data = dataItem as DocumentDataVM;

                @if (data.Type == "pdf")
                {
                    <img src="../img/pdficon.png" style="width: 14%;" />
                }
                else if (data.Type == "doc" || data.Type == "docx")
                {
                    <img src="../img/word.png" style="width: 14%;" />
                }
                else if (data.Type == "csv" || data.Type == "xlsx")
                {
                    <img src="../img/excelicon.png" style="width: 14%;" />
                }
                else if (data.Type == "png" || data.Type == "jpg" || data.Type == "jpeg" || data.Type == "svg" ||
                data.Type == "pjp" || data.Type == "pjpeg" || data.Type == "jfif")
                {
                    <img src="../img/photosicon.png" style="width: 14%;" />
                }
                else
                {
                    <img src="../img/defaultdocicon.png" style="width: 14%;" />
                }
            }
        </GridCommandColumn>

        <GridColumn Field="@nameof(DocumentDataVM.Size)" Title="Size" Sortable="true" />

        @if (string.IsNullOrWhiteSpace(ParentModuleName))
        {
            <GridColumn Field="@nameof(DocumentDataVM.ModuleName)" Title="Module Name" Sortable="true" />
        }

        @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result)
        {
            <GridColumn Field="@nameof(DocumentDataVM.CompanyName)" Title="Company Name" Sortable="true" />
        }

        @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.Admin).Result || _currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result)
        {
            <GridColumn Field="@nameof(DocumentDataVM.UserName)" Title="User" Sortable="true" />
        }

        <GridCommandColumn Context="dataItem" Title="Expiration Date">
            @{
                DocumentDataVM value = dataItem as DocumentDataVM;
                string date = "-";

                if (value.ExpirationDate != null)
                {
                    date = value.ExpirationDate.Value.ToShortDateString();
                }

                <label>@date</label>
            }
        </GridCommandColumn>

        <GridCommandColumn Context="dataItem" Title="Name">
            @{
                DocumentDataVM value = dataItem as DocumentDataVM;
                bool isShareble = !value.IsShareable || (value.LastShareDate != null && value.LastShareDate.Value < DateTime.Now.Date);

                <TelerikButton Class="btn k-btn-grid-download mx-1" ThemeColor="error"
                           OnClick="()=>DownloadDocument(value)" Enabled=!value.IsLoadingDownloadButton>
                    <CustomIcons IconName="grid-download" PrimaryColor="white"></CustomIcons>
                    @value.TotalDownloads.ToString()
                    <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="value.IsLoadingDownloadButton">
                    </TelerikLoader>
                </TelerikButton>

                <TelerikButton Class="btn k-btn-grid-share mx-1" Enabled="!isShareble" ThemeColor="info" OnClick="()=>OpenShareDocumentDialog(value.Id)">
                    <CustomIcons IconName="grid-share" PrimaryColor="white"></CustomIcons>
                    @value.TotalShares.ToString()
                </TelerikButton>

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, moduleName))
                {
                    <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>DocumentCreateDialog(value)"
                           ThemeColor="success" Enabled=!value.IsLoadingEditButton>

                        <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                        <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light"
                               Visible="value.IsLoadingEditButton">
                        </TelerikLoader>

                    </TelerikButton>
                }

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                {
                    <TelerikButton Class="btn k-btn-grid-delete mx-1" ThemeColor="error" OnClick="()=>OpenDeleteDialog(value)">
                        <CustomIcons IconName="grid-delete" PrimaryColor="white"></CustomIcons>
                    </TelerikButton>
                }
            }
        </GridCommandColumn>

    </GridColumns>

</TelerikGrid>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" Width="600px"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Create DocumentData="@documentData" CloseDialogCallBack="@CloseDialog"></Create>
            }
            else if (operationType == OperationType.Delete)
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to delete <b> @documentData.DisplayName</b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                            {
                                <TelerikButton Class="btn k-btn-danger" ThemeColor="error" OnClick="()=>DeleteAsync(documentData.Id)">
                                    Yes
                                </TelerikButton>
                            }

                            <TelerikButton Class="btn k-btn-secondary" ThemeColor="secondary" OnClick="()=>isDisplayPopup = false">
                                No
                            </TelerikButton>

                        </div>
                    </div>
                </div>
            }
            else if (operationType == OperationType.DocumentViewer)
            {
                @if (isImageType)
                {
                    <img src="@documentPath" style="max-width:100%;max-height:100%;" />
                }
                else
                {
                    <iframe width="100%" height="520" src="@documentPath" frameborder="0" allowfullscreen></iframe>
                }

            }
            else if (operationType == OperationType.DocumentShare)
            {
                <div class="row bg-gray">
                    <div class="col-12">
                        <div class="d-flex justify-content-end">
                            <span @onclick="(()=>CopyLinkToClipboard(documentDataVM.DocumentPath))">
                                <CustomIcons IconName="duplicate" PrimaryColor="#757575" />
                            </span>
                        </div>
                        <div class="d-flex justify-content-center">
                            <a href="@documentDataVM.DocumentPath" target="_blank">@documentDataVM.DocumentPath</a>
                        </div>
                    </div>
                </div>
                <div class="row d-flex justify-content-center">
                        <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="()=>CopyLinkToClipboard(documentDataVM.DocumentPath)">
                            Copy to clipboard
                        </TelerikButton>
                 </div>
            }
            else
            {
                <div>
                    <p> No Preview available for selected document.</p>
                </div>
            }
        </Body>
    </CustomPopupComponent>
}
