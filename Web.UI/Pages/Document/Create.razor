@using DataModels.VM.Document
@using DataModels.Enums
@using DataModels.VM.Common;
@using DataModels.Constants;

<style>
    .addTag {
        margin: 5px 0px 8px 0px
    }
</style>
<TelerikForm Model="@documentData" EditContext="@editContext" OnValidSubmit="@UploadFilesAsync">

    <FormValidation>

        <CustomValidationSummary> </CustomValidationSummary>

    </FormValidation>

    <FormItems>
        <div class="row">
            <input type="hidden" value="@documentData.Id" name="Id" />
            <div class="col-12">
                <div class="row">
                    <div class="col-6" style="margin-bottom:20px;">
                        <label>Upload</label>

                        <CustomFileUpload DisplayName="@documentData.DisplayName" IsFileAdded="@isFileAdded" supportedFormats="@supportedDocumentsFormat"
                                          OnInputFileChangeCallback="@OnInputFileChangeAsync"
                                          IsFileUploadHasError="@isFileUploadHasError">
                        </CustomFileUpload>

                        @if (isFileUploadHasError)
                        {
                            <span style="color:red !important">@errorMessage</span>
                        }
                    </div>

                    <div class="col-6" style="margin-bottom:20px;">
                        <label>Document Name</label>
                        <TelerikTextBox Id="displayName" @bind-Value="@documentData.DisplayName" PlaceHolder="Display Name"></TelerikTextBox>
                        <TelerikValidationMessage For="@(() => documentData.DisplayName)"></TelerikValidationMessage>
                    </div>

                    @if (globalMembers.IsSuperAdmin && ParentModuleName != "Company")
                    {
                        <div class="col-6">
                            <label>Company</label>
                            <TelerikComboBox Id=companyId Data="@documentData.CompniesList" TextField="Name"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select Company" ValueField="Id"
                                         Value="@documentData.CompanyId"
                                         ValueExpression="@( () => documentData.CompanyId )"
                                         ValueChanged="@( (int value) => OnChange(value) )">
                            </TelerikComboBox>

                            <TelerikValidationMessage For="@(() => documentData.CompanyId)"></TelerikValidationMessage>
                        </div>
                    }

                    <div class="col-6">
                        <label>Document Tag</label>

                        <MultiSelectWithAllCheckbox Data="@documentData.DocumentTagsList" SelectedData="@selectedTags"
                                                    PlaceHolderText="Select Tags"
                                                    UpdateParentListCallback="@UpdateSelectedDocumentTagData">
                        </MultiSelectWithAllCheckbox>

                        <TelerikButton ButtonType="@ButtonType.Button" OnClick=@(args => OpenCreateTagDialogAsync())
                                       Class="btn k-btn-primary addTag" ThemeColor="primary">
                            <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons>
                        </TelerikButton>

                    </div>


                    @if (globalMembers.IsSuperAdmin || globalMembers.IsAdmin)
                    {
                        <div class="col-6">
                            <label>User</label>
                            <TelerikComboBox Id=userId Data="@documentData.UsersList" TextField="Name"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select User" ValueField="Id" @bind-Value="@(documentData.UserId)">
                            </TelerikComboBox>

                            <TelerikValidationMessage For="@(() => documentData.UserId)"></TelerikValidationMessage>
                        </div>
                    }
                    else
                    {
                        <input type="hidden" @bind="documentData.UserId">
                    }

                    @if (!documentData.IsFromParentModule)
                    {
                        <div class="col-6">
                            <label>Document Type</label>
                            <TelerikComboBox Id=documentType Data="@documentData.ModulesList" TextField="Name"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select Module" ValueField="Id" @bind-Value="@(documentData.ModuleId)">
                            </TelerikComboBox>

                            <TelerikValidationMessage For="@(() => documentData.ModuleId)"></TelerikValidationMessage>
                        </div>
                    }

                    <div class="col-6">
                        <label>Directory</label>
                        <TelerikComboBox Id=directory Data="@documentData.DocumentDirectoriesList" TextField="Name"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select Module" ValueField="Id" @bind-Value="@(documentData.DocumentDirectoryId)">
                        </TelerikComboBox>

                    </div>

                    <div class="col-6">
                        <div class="row">
                            <div class="col-12">
                                <label>Is Shareable</label>
                                <div>
                                    <TelerikSwitch Id="isShareable" @bind-Value=@documentData.IsShareable />
                                </div>
                            </div>
                        </div>
                    </div>
                    @if (documentData.IsShareable)
                    {
                        <div class="col-6">
                            <div class="row">
                                <div class="col-12">
                                    <label for="lastShareDate">Last Share Date</label>
                                    <div>
                                        <TelerikDatePicker @bind-Value="@documentData.LastShareDate" Id="lastShareDate"></TelerikDatePicker>
                                        <TelerikValidationMessage For="@(() => documentData.LastShareDate)"></TelerikValidationMessage>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="col-6">
                        <div class="row">
                            <div class="col-12">
                                <label>Expiration Date</label>
                                <div>
                                    <TelerikDatePicker @bind-Value="@documentData.ExpirationDate" Id="expirationDate"></TelerikDatePicker>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>
        <hr class="hr-gray mt-3 mb-3" />
    </FormItems>

    <FormButtons>

        <div class="row">
            <div class="col-md-12 text-right">
                @{
                    int id = 0;

                    if (documentData.Id != Guid.Empty)
                    {
                        id = 1;
                    }
                    <FormFooterComponent id="@id" IsSubmitButtonLoading="@isBusySubmitButton" CloseDialogCallBack="@CloseDialog">
                    </FormFooterComponent>
                }
            </div>
        </div>

    </FormButtons>

</TelerikForm>

@if (isDisplayChildPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" Width="600px"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            <Web.UI.Pages.Document.DocumentTag.Create CloseDialogCallBack="@CloseChildDialog" CompanyId="@documentData.CompanyId" />
        </Body>
    </CustomPopupComponent>
}
