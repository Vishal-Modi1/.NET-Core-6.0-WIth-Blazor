@using DataModels.VM.Document
@using DataModels.Enums
@using DataModels.VM.Common;
@using DataModels.Constants;

<TelerikForm Model="@documentData" EditContext="@editContext" OnValidSubmit="@UploadFilesAsync">

    <FormValidation>
        <DataAnnotationsValidator></DataAnnotationsValidator>
    </FormValidation>

    <FormItems>
        <div class="popup-content">

            <input type="hidden" value="@documentData.Id" name="Id" />

            <div class="row">

                <div class="col-md-6 align-items-center d-flex">
                    <label for="firstName" class="k-label k-form-label">Upload</label>
                </div>

                <div class="col-md-6 align-items-center d-flex">
                    <label for="displayName" class="k-label k-form-label">Document Name</label>
                </div>

                <div class="col-md-6">

                    <InputFile Id="" OnChange="OnInputFileChangeAsync" Value="@documentData.DisplayName"
                               accept="@supportedDocumentsFormat" />

                    @if (isFileUploadHasError)
                    {
                        <span>@errorMessage</span>
                    }
                </div>

                <div class="col-md-6">

                    <TelerikTextBox Id="displayName" @bind-Value="@documentData.DisplayName" PlaceHolder="Display Name"></TelerikTextBox>
                    <TelerikValidationMessage For="@(() => documentData.DisplayName)"></TelerikValidationMessage>

                </div>

            </div>

            <div class="row">
                <div class="col-md-12">
                    <label for="documentTag" class="k-label k-form-label">Document Tag</label>
                </div>

                <div class="col-md-12">

                    <TelerikMultiSelect @ref="@autoComplete" Data="@documentData.DocumentTagsList"
                                        @bind-Value="@values" AutoClose="false" Placeholder="Search a tag..."
                                        TextField="TagName" ValueField="Id">
                    </TelerikMultiSelect>

                    <TelerikButton ButtonType="@ButtonType.Button" OnClick=@(args => OpenCreateTagDialogAsync())
                                   Class="btn k-btn-primary" ThemeColor="primary">
                        <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons>

                    </TelerikButton>

                </div>
            </div>


            @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result)
            {
                <div class="col-md-6 align-items-center d-flex">
                    <div class="row">
                        <div class="col-md-12 align-items-center d-flex">
                            <label for="companyId" class="k-label k-form-label">Company</label>
                        </div>
                        <div class="col-md-12 align-items-center d-flex">

                            <TelerikComboBox Id=companyId Data="@documentData.CompniesList" TextField="Name"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select Company" ValueField="Id"
                                         Value="@documentData.CompanyId"
                                         ValueExpression="@( () => documentData.CompanyId )"
                                         ValueChanged="@( (int value) => OnChange(value) )">
                            </TelerikComboBox>

                        </div>
                        <div class="col-md-12 align-items-center d-flex">
                            <TelerikValidationMessage For="@(() => documentData.CompanyId)"></TelerikValidationMessage>
                        </div>
                    </div>
                </div>
            }

            @if (_currentUserPermissionManager.IsValidUser(AuthStat, UserRole.SuperAdmin).Result || _currentUserPermissionManager.IsValidUser(AuthStat, UserRole.Admin).Result)
            {
                <div class="col-md-6 align-items-center d-flex">
                    <div class="row">
                        <div class="col-md-12 align-items-center d-flex">
                            <label for="userId" class="k-label k-form-label">User</label>
                        </div>
                        <div class="col-md-12 align-items-center d-flex">

                            <TelerikComboBox Id=userId Data="@documentData.UsersList" TextField="Name"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select User" ValueField="Id" @bind-Value="@(documentData.UserId)">
                            </TelerikComboBox>

                        </div>
                        <div class="col-md-12 align-items-center d-flex">
                            <TelerikValidationMessage For="@(() => documentData.UserId)"></TelerikValidationMessage>
                        </div>
                    </div>
                </div>

            }

            @if (!documentData.IsFromParentModule)
            {
                <div class="col-md-6 align-items-center d-flex">
                    <div class="row">
                        <div class="col-md-12 align-items-center d-flex">
                            <label for="documentType" class="k-label k-form-label">Document Type</label>
                        </div>
                        <div class="col-md-12 align-items-center d-flex">

                            <TelerikComboBox Id=documentType Data="@documentData.ModulesList" TextField="Name"
                                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                         Placeholder="Select Module" ValueField="Id" @bind-Value="@(documentData.ModuleId)">
                            </TelerikComboBox>

                        </div>
                        <div class="col-md-12 align-items-center d-flex">
                            <TelerikValidationMessage For="@(() => documentData.ModuleId)"></TelerikValidationMessage>
                        </div>
                    </div>
                </div>
            }

            <div class="row">
                <div class="col-md-6 align-items-center d-flex">
                    <label for="isShareable" class="k-label k-form-label">Is Shareable</label>
                </div>

                <div class="col-md-6 align-items-center d-flex">
                    @if (documentData.IsShareable)
                    {
                        <label for="lastShareDate" class="k-label k-form-label">Last Share Date</label>
                    }
                </div>

                <div class="col-md-6">
                    <TelerikSwitch Id="isShareable" @bind-Value=@documentData.IsShareable />
                </div>

                <div class="col-md-6">
                    @if (documentData.IsShareable)
                    {
                        <TelerikDatePicker @bind-Value="@documentData.LastShareDate" Id="lastShareDate"></TelerikDatePicker>
                        <TelerikValidationMessage For="@(() => documentData.LastShareDate)"></TelerikValidationMessage>
                    }
                </div>

            </div>

            <div class="row">
                <div class="col-md-6 align-items-center d-flex">
                    <label for="expirationDate" class="k-label k-form-label">Expiration Date</label>
                </div>
                <div class="col-md-6">

                    <TelerikDatePicker @bind-Value="@documentData.ExpirationDate" Id="expirationDate"></TelerikDatePicker>

                </div>
            </div>

        </div>

    </FormItems>

    <FormButtons>

        <hr style="margin-top:35px" />

        <div class="row" style="margin-bottom:0px">
            <div class="col-md-12 text-right">
                @{
                    int id = 0;

                    if (documentData.Id != Guid.Empty)
                    {
                        id = 1;
                    }
                    <FormFooterComponent id="@id" IsSubmitButtonLoading="@isBusySubmitButton" CloseDialogCallBack="@CloseDialog">
                    </FormFooterComponent>
                }
            </div>
        </div>

    </FormButtons>

</TelerikForm>

@if (isDisplayChildPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" Width="600px"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            <Web.UI.Pages.Document.DocumentTag.Create CloseDialogCallBack="@CloseChildDialog">

            </Web.UI.Pages.Document.DocumentTag.Create>

        </Body>
    </CustomPopupComponent>
}
