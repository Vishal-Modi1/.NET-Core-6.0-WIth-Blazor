@namespace Web.UI.Pages.AircraftMake
@using DataModels.Enums
@using DataModels.VM.AircraftMake
@using Web.UI.Shared.Components;
@layout TelerikLayout

@page "/AircraftMake"

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <div>
            <ComponentTitle Title="Aircraft Makes" Type="AdministrationTitle" />
        </div>
        <div>
            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, moduleName) || true)
            {
                <div class="col-md-4">
                    <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => AircraftMakeCreateDialog(new AircraftMakeDataVM())">
                        <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                    </TelerikButton>
                </div>
            }
        </div>
    </div>
</div>
<div class="row my-2">
    <div class="col-md-4">
        <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Make" ValueChanged="@( (string value) => OnSearchValueChanges<AircraftMakeDataVM>(value, grid) )" />
    </div>
</div>

<TelerikGrid TItem="AircraftMakeDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
             Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

    <GridSettings>
        <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
    </GridSettings>

    <GridColumns>

        <GridColumn Field="@nameof(AircraftMakeDataVM.Name)" />

        <GridCommandColumn Context="dataItem" Title="Action">
            @{
                AircraftMakeDataVM aircraftMakeDataVM = dataItem as AircraftMakeDataVM;

                <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>AircraftMakeCreateDialog(aircraftMakeDataVM)"
                           ThemeColor="success" Enabled=!aircraftMakeDataVM.IsLoadingEditButton>

                    <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                    <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light"
                               Visible="aircraftMakeDataVM.IsLoadingEditButton">
                    </TelerikLoader>

                </TelerikButton>

                <TelerikButton Class="btn k-btn-grid-delete mx-1" ThemeColor="error" OnClick="()=>OpenDeleteDialog(aircraftMakeDataVM)">
                    <CustomIcons IconName="grid-delete" PrimaryColor="white"></CustomIcons>
                </TelerikButton>

            }
        </GridCommandColumn>

    </GridColumns>

</TelerikGrid>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Web.UI.Pages.AircraftMake.Create AircraftMake=@_aircraftMake CloseDialogCallBack="@CloseDialog"></Web.UI.Pages.AircraftMake.Create>
            }
            else
            {
                //Delete popup
                <div>
                    <p class="mb-4">Are you sure, You want to remove <b> @_aircraftMake.Name </b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                            {
                            }

                            <TelerikButton Class="btn k-btn-danger" OnClick="() => DeleteAsync(_aircraftMake.Id)" Enabled="@(!isBusyDeleteButton)">
                                Yes
                                <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyDeleteButton">
                                </TelerikLoader>
                            </TelerikButton>

                            <TelerikButton ThemeColor="secondary" Class="btn k-btn-secondary" OnClick="() => isDisplayPopup = false">
                                No
                            </TelerikButton>

                        </div>
                    </div>
                </div>
            }
        </Body>
    </CustomPopupComponent>
}