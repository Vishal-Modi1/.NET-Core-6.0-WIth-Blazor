@using DataModels.VM.AircraftEquipment
@using DataModels.VM.Common
@using System.Collections.ObjectModel
@using System.ComponentModel
@using DataModels.VM.Scheduler;
@using DataModels.Entities;
@using DataModels.VM;
@using Web.UI.Shared.Components;

@page "/Scheduler"

<PageTitle>Scheduler | Fly Manager </PageTitle>
<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <div>
            <ComponentTitle Title="Scheduler" Type="AdministrationTitle" />
        </div>
        <div>
            <div class="col-md-4">
                <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => OpenCreateScheduleDialogAsync()"
                               Enabled="@(!isBusyAddButton)">
                    <TelerikLoader Class="loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                    </TelerikLoader>
                    <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                </TelerikButton>
            </div>
        </div>
    </div>
</div>
<div class="row my-2">
   
    <div class="col-md-6 col-sm-6">
        <TelerikMultiSelect Data="@allAircraftList" @bind-Value="@multipleAircrafts" OnChange="@OnAircraftsListChange"
                            TextField="TailNo" ValueField="Id" Placeholder="Select Aircraft" />
    </div>
</div>

<TelerikScheduler Data="@dataSource" Date="@currentDate" Height="600px" View="@currentView"
                  @ref="@scheduleRef"
                  OnItemClick="@OnClickHandlerAsync"
                  OnItemDoubleClick="@OnDoubleClickHandler"
                  AllowCreate="true"
                  OnEdit="@EditHandler"
                  DateChanged="@DateChangedHandler"
                  IdField="@(nameof(SchedulerVM.Id))"
                  StartField="@(nameof(SchedulerVM.StartTime))"
                  EndField="@(nameof(SchedulerVM.EndTime))"
                  DescriptionField="@(nameof(SchedulerVM.DisplayTitle))"
                  TitleField="@(nameof(SchedulerVM.DisplayTitle))"
                  IsAllDayField="@(nameof(SchedulerVM.IsAllDay))"
                  ViewChanged="@ViewChangedHandler">

    <SchedulerViews>
        <SchedulerDayView StartTime="@dayStart" EndTime="@dayEnd" WorkDayStart="@workDayStart" WorkDayEnd="@workDayEnd" />
        <SchedulerWeekView StartTime="@dayStart" EndTime="@dayEnd" WorkDayStart="@workDayStart" WorkDayEnd="@workDayEnd" />
        <SchedulerMultiDayView StartTime="@dayStart" EndTime="@dayEnd" WorkDayStart="@workDayStart" WorkDayEnd="@workDayEnd" NumberOfDays="@multiDayDaysCount" />
        <SchedulerMonthView></SchedulerMonthView>
        <SchedulerTimelineView StartTime="@dayStart" EndTime="@dayEnd" WorkDayStart="@workDayStart" WorkDayEnd="@workDayEnd" />
    </SchedulerViews>
@*
    <SchedulerSettings>
        <SchedulerGroupSettings Resources="@resources" Orientation="SchedulerGroupOrientation.Vertical"></SchedulerGroupSettings>
    </SchedulerSettings>

    <SchedulerResources>
        <SchedulerResource Field="Aircrafts" TextField="AircraftTailNo" ValueField="Id" Data="@observableAircraftsData"></SchedulerResource>
    </SchedulerResources>*@

</TelerikScheduler>

@{
    @if (isDisplayPopup)
    {
        <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false"
                      OnClose="@(()=> {isDisplayPopup = false;})">

            <Body>
                <Create schedulerVM="@schedulerVM" uiOptions="@uiOptions"
                InitializeValuesParentEvent="@InitializeValues"
                OpenDialogParentEvent="@OpenDialog" DeleteParentEvent="@DeleteEventAsync"
                RefreshSchedulerDataSourceParentEvent="@RefreshSchedulerDataSourceAsync"
                CloseDialogParentEvent="@CloseDialog" LoadDataParentEvent="@ReloadData"></Create>

            </Body>

        </CustomPopupComponent>
    }
}



@*<TelerikScheduler Data="@Appointments" @bind-Date="@StartDate" Height="600px" @bind-View="@CurrView">
    <SchedulerViews>
        <SchedulerDayView StartTime="@DayStart" />
        <SchedulerWeekView StartTime="@DayStart" />
        <SchedulerMultiDayView StartTime="@DayStart" NumberOfDays="10" />
    </SchedulerViews>

   

</TelerikScheduler>

@code {
    public SchedulerView CurrView { get; set; } = SchedulerView.Week;
    public DateTime StartDate { get; set; } = new DateTime(2019, 12, 2);
    public DateTime DayStart { get; set; } = new DateTime(2000, 1, 1, 8, 0, 0); //the time portion is important

    List<SchedulerAppointment> Appointments = new List<SchedulerAppointment>()
    {
            new SchedulerAppointment
            {
                Title = "Board meeting",
                Description = "Q4 is coming to a close, review the details.",
                Start = new DateTime(2019, 12, 5, 10, 00, 0),
                End = new DateTime(2019, 12, 5, 11, 30, 0)
            },

            new SchedulerAppointment
            {
                Title = "Vet visit",
                Description = "The cat needs vaccinations and her teeth checked.",
                Start = new DateTime(2019, 12, 2, 11, 30, 0),
                End = new DateTime(2019, 12, 2, 12, 0, 0)
            },

            new SchedulerAppointment
            {
                Title = "Planning meeting",
                Description = "Kick off the new project.",
                Start = new DateTime(2019, 12, 6, 9, 30, 0),
                End = new DateTime(2019, 12, 6, 12, 45, 0)
            },

            new SchedulerAppointment
            {
                Title = "Trip to Hawaii",
                Description = "An unforgettable holiday!",
                IsAllDay = true,
                Start = new DateTime(2019, 11, 27),
                End = new DateTime(2019, 12, 05)
            },

            new SchedulerAppointment
            {
                Title = "Morning run",
                Description = "Some time to clear the head and exercise.",
                Start = new DateTime(2019, 11, 27, 9, 0, 0),
                End = new DateTime(2019, 11, 27, 9, 30, 0),
                RecurrenceRule = "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR"
            }
    };

    public class SchedulerAppointment
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public List<DateTime> RecurrenceExceptions { get; set; }
        public Guid? RecurrenceId { get; set; }

        public SchedulerAppointment()
        {
            Id = Guid.NewGuid();
        }
    }
}*@