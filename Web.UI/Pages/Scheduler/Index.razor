@using DataModels.VM.AircraftEquipment
@using DataModels.VM.Common
@using System.Collections.ObjectModel
@using System.ComponentModel
@using DataModels.VM.Scheduler;
@using DataModels.Entities;
@using DataModels.VM;
@using Web.UI.Shared.Components;

@page "/Scheduler"

<style>
    .k-scheduler .k-event {
        padding: 0px;
    }

    .custom-appointment {
        width: 100%;
        height: 100%;
        padding: 5px;
    }
</style>

<PageTitle>Scheduler | Fly Manager </PageTitle>
<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <div>
            <ComponentTitle Title="Scheduler" Type="AdministrationTitle" />
        </div>
        <div>
            <div class="col-md-4">
                <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => OpenCreateScheduleDialogAsync()"
                               Enabled="@(!isBusyAddButton)">
                    <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                    </TelerikLoader>
                    <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                </TelerikButton>
            </div>
        </div>
    </div>
</div>
<div class="row my-2">

    <div class="col-md-6 col-sm-6">
        <TelerikMultiSelect Data="@allAircraftList" @bind-Value="@multipleAircrafts" OnChange="@OnAircraftsListChange"
                            TextField="TailNo" ValueField="Id" Placeholder="Select Aircraft" />
    </div>
</div>

<TelerikScheduler Data="@dataSource" Date="@currentDate" Height="600px" View="@currentView"
                  @ref="@scheduleRef"
                  OnItemClick="@OnClickHandlerAsync"
                  OnItemDoubleClick="@OnDoubleClickHandler"
                  AllowCreate="true" AllowDelete="true" AllowUpdate="true"
                  OnEdit="@EditHandler"
                  DateChanged="@DateChangedHandler"
                  IdField="@(nameof(SchedulerVM.Id))"
                  StartField="@(nameof(SchedulerVM.StartTime))"
                  EndField="@(nameof(SchedulerVM.EndTime))"
                  DescriptionField="@(nameof(SchedulerVM.DisplayTitle))"
                  TitleField="@(nameof(SchedulerVM.DisplayTitle))"
                  IsAllDayField="@(nameof(SchedulerVM.IsAllDay))"
                  ViewChanged="@ViewChangedHandler">

    <ItemTemplate>
        @{
            var appt = context as SchedulerVM;

            if (appt.AircraftSchedulerDetailsVM.IsCheckOut)
            {
                appt.Color = "#33ff81";
            }
            else
            {
                if (appt.AircraftSchedulerDetailsVM.CheckInTime != null)
                {
                    appt.Color = "#B8B8B8";
                }
                else
                {
                    appt.Color = "#007bff";
                }
            }

            <div class="custom-appointment"
                 style="background-color: @appt.Color">
                @appt.DisplayTitle
            </div>
        }
    </ItemTemplate>

    <SchedulerViews>
        <SchedulerDayView />
        <SchedulerWeekView />
        <SchedulerMultiDayView NumberOfDays="@multiDayDaysCount" />
        <SchedulerMonthView></SchedulerMonthView>
        <SchedulerTimelineView />
    </SchedulerViews>

    <SchedulerResources>
        <SchedulerResource Field="AircraftId" TextField="AircraftTailNo" ValueField="Id" Data="@aircraftsResourceList"></SchedulerResource>
    </SchedulerResources>
    <SchedulerSettings>
        <SchedulerGroupSettings Resources="@resources" Orientation="@SchedulerGroupOrientation.Vertical"></SchedulerGroupSettings>
    </SchedulerSettings>

</TelerikScheduler>

@{
    @if (isDisplayPopup)
    {
        <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false"
                      OnClose="@(()=> {isDisplayPopup = false;})">

            <Body>
                <Create schedulerVM="@schedulerVM" uiOptions="@uiOptions"
                InitializeValuesParentEvent="@InitializeValues"
                OpenDialogParentEvent="@OpenDialog" DeleteParentEvent="@LoadDataAsync"
                RefreshSchedulerDataSourceParentEvent="@RefreshSchedulerDataSourceAsync"
                CloseDialogParentEvent="@CloseDialog" LoadDataParentEvent="@LoadDataAsync"></Create>

            </Body>

        </CustomPopupComponent>
    }
}
