@using DataModels.Enums
@using DataModels.VM.AircraftEquipment
@using DataModels.VM.Common
@using System.Collections.ObjectModel
@using System.ComponentModel
@using DE = DataModels.Entities
@using DataModels.Entities;
@using DataModels.VM;
@using Models.Shared;
@using Newtonsoft.Json;

<div class="row mb-1">
    <div class="col-12">
        <div class="d-flex justify-content-between">
            <FontLabel Class="font-weight-bold">STATUS</FontLabel>
            <FontLabel>@GetSchedulerStatusText()</FontLabel>
        </div>
    </div>
</div>
<div class="row justify-content-between align-items-center m-0 custom-border-y my-1">
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center">
            <FontLabel fontColor="#00AFA5" Class="font-weight-bold">Start</FontLabel>
        </div>

        <div class="d-flex justify-content-center">

            <FontLabel fontSize="12px">@schedulerVM.StartTime.ToString("ddd, MMM dd, yyyy")</FontLabel>

        </div>
    </div>
    <div class="col-4 d-flex flex-column">
        <span class="d-flex justify-content-center">
            <div class="row m-0">
                <div class="col-12">
                    <style type="text/css">
                        .small-svg svg {
                            width: 250px !important;
                            height: auto !important;
                        }
                    </style>
                    <span class="small-svg">
                        <CustomIcons IconName="start-end-plain-time" />
                    </span>

                </div>
                <div class="col-12 d-flex justify-content-between">

                    <span><FontLabel fontSize="12px">@schedulerVM.StartTime.ToString("%h:mm tt")</FontLabel> </span>
                    <span><FontLabel fontSize="12px">@schedulerVM.EndTime.ToString("%h:mm tt")</FontLabel></span>

                </div>
            </div>
        </span>
    </div>
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center">
            <FontLabel fontColor="#FE5722" Class="font-weight-bold">End</FontLabel>
        </div>
        <div class="d-flex justify-content-center">

            <FontLabel fontSize="12px">@schedulerVM.EndTime.ToString("ddd, MMM dd, yyyy")</FontLabel>
        </div>

    </div>
</div>

@if (schedulerVM.AircraftSchedulerDetailsVM != null
&& (!string.IsNullOrWhiteSpace(schedulerVM.AircraftSchedulerDetailsVM.CheckOutByUserName) || !string.IsNullOrWhiteSpace(schedulerVM.AircraftSchedulerDetailsVM.CheckInByUserName)))
    {
        <div class="row justify-content-between align-items-center m-0 custom-border-y my-2 mt-0">
            <div class="col-4 d-flex flex-column">
                @if (!string.IsNullOrWhiteSpace(schedulerVM.AircraftSchedulerDetailsVM.CheckOutByUserName))
                {
                    <div class="d-flex justify-content-center">
                        <FontLabel fontColor="#00AFA5" Class="font-weight-bold">Checked Out</FontLabel>
                    </div>
                    <FontLabel fontSize="12px" Class="d-flex justify-content-center">@schedulerVM.AircraftSchedulerDetailsVM.CheckOutTime.Value.ToString("ddd, MMM dd, yyyy")</FontLabel>
                }
            </div>
            <div class="col-4 d-flex flex-column">
                <span class="d-flex justify-content-center">
                    <div class="row m-0">
                        <div class="col-12">
                            <style type="text/css">
                                .small-svg svg {
                                    width: 250px !important;
                                    height: auto !important;
                                }
                            </style>
                            <span class="small-svg">
                                <CustomIcons IconName="start-end-plain-time" />
                            </span>

                        </div>
                        <div class="col-12 d-flex justify-content-between">
                            @if (!string.IsNullOrWhiteSpace(schedulerVM.AircraftSchedulerDetailsVM.CheckOutByUserName))
                            {
                                <FontLabel fontSize="12px">@schedulerVM.AircraftSchedulerDetailsVM.CheckOutTime.Value.ToString("%h:mm tt")</FontLabel>
                            }
                            @if (!string.IsNullOrWhiteSpace(schedulerVM.AircraftSchedulerDetailsVM.CheckInByUserName))
                            {
                                <FontLabel fontSize="12px">@schedulerVM.AircraftSchedulerDetailsVM.CheckInTime.Value.ToString("%h:mm tt")</FontLabel>
                            }
                        </div>
                    </div>
                </span>
            </div>
            <div class="col-4 d-flex flex-column">
                @if (!string.IsNullOrWhiteSpace(schedulerVM.AircraftSchedulerDetailsVM.CheckInByUserName))
                {
                    <div class="d-flex justify-content-center">
                        <FontLabel fontColor="#FE5722" Class="font-weight-bold">Checked In</FontLabel>
                    </div>
                    <div class="d-flex justify-content-center">
                        <FontLabel fontSize="12px">@schedulerVM.AircraftSchedulerDetailsVM.CheckInTime.Value.ToString("ddd, MMM dd, yyyy")</FontLabel>
                    </div>
                }
            </div>
        </div>

    }
<div class="row justify-content-between align-items-center m-0 custom-border-y my-1">
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center">

            <FontLabel fontColor="#00AFA5" Class="font-weight-bold">Departure Airport</FontLabel>
        </div>
        <div class="d-flex justify-content-center">

            <a href="javascript:void(0)" style="color:#1151F3" @onclick="@((ui) => OpenAirportDetailsPopup(schedulerVM.DepartureAirport))">
                <FontLabel fontSize="12px">@schedulerVM.DepartureAirport</FontLabel>
            </a>

        </div>
    </div>
    <div class="col-4 d-flex flex-column">
        <span class="d-flex justify-content-center">
            <div class="row m-0">
                <div class="col-12">
                    <style type="text/css">
                        .small-svg svg {
                            width: 250px !important;
                            height: auto !important;
                        }
                    </style>
                    <span class="small-svg">
                        <CustomIcons IconName="dummy-plain" />
                    </span>
                </div>
                <div class="col-12 d-flex justify-content-between">

                    <span><FontLabel fontSize="12px">@schedulerVM.StartTime.ToString("%h:mm tt")</FontLabel></span>
                    <span><FontLabel fontSize="12px">@schedulerVM.EndTime.ToString("%h:mm tt")</FontLabel></span>
                </div>
            </div>
        </span>
    </div>
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center">

            <FontLabel fontColor="#FE5722" Class="font-weight-bold">Arrival Airport</FontLabel>
        </div>
        <div class="d-flex justify-content-center">

            <a href="javascript:void(0)" style="color:#1151F3" @onclick="@((ui) => OpenAirportDetailsPopup(schedulerVM.ArrivalAirport))">
                <FontLabel fontSize="12px">@schedulerVM.ArrivalAirport</FontLabel>
            </a>
        </div>
    </div>
</div>

<div class="row justify-content-between align-items-center m-0 custom-border-y  my-1">
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center popup-title">
            <FontLabel Class="font-weight-bold">Activity</FontLabel>
        </div>
        <span class="d-flex justify-content-center">
            <FontLabel fontSize="12px">
                @(@schedulerVM.ScheduleActivitiesList.FirstOrDefault(p => p.Id == @schedulerVM.ScheduleActivityId)?.Name )
            </FontLabel>
        </span>
    </div>
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center popup-title"> <FontLabel Class="font-weight-bold">Aircraft</FontLabel></div>
        <span class="d-flex justify-content-center">
            <FontLabel fontSize="12px">@(@schedulerVM.AircraftsList.FirstOrDefault(p => p.Id == @schedulerVM.AircraftId)?.Name ?? "-")</FontLabel>
        </span>
    </div>
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center popup-title"><FontLabel Class="font-weight-bold">Title</FontLabel></div>
        <span class="d-flex justify-content-center"> <FontLabel fontSize="12px">@(schedulerVM.DisplayTitle)</FontLabel></span>
    </div>
</div>
<div class="row justify-content-between align-items-center m-0 custom-border-y  my-1">
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center popup-title"><FontLabel Class="font-weight-bold">Member 1</FontLabel></div>
        <span class="d-flex justify-content-center">
            @{
                var member1 = @schedulerVM.Member1List.FirstOrDefault(p => p.Id == @schedulerVM.Member1Id);
                <span><FontLabel fontSize="12px">@(member1 != null && !@String.IsNullOrEmpty(member1.Name) ? member1.Name : "-" )</FontLabel></span>
            }

        </span>
    </div>
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center popup-title"><FontLabel Class="font-weight-bold">Member 2</FontLabel></div>
        <span class="d-flex justify-content-center">

            @if (@schedulerVM.Member2Id != null)
            {
                var member2 = @schedulerVM.Member2List.FirstOrDefault(p => p.Id == @schedulerVM.Member2Id);
                <FontLabel fontSize="12px">@(member2 != null && !@String.IsNullOrEmpty(member2.Name) ? member2.Name : "-" )</FontLabel>
            }
            else
            {
                <FontLabel>-</FontLabel>
            }

        </span>
    </div>
    <div class="col-4 d-flex flex-column">
        <div class="d-flex justify-content-center popup-title"><FontLabel Class="font-weight-bold">Instructor</FontLabel></div>
        <span class="d-flex justify-content-center">
            @if (@schedulerVM.InstructorId != null && @schedulerVM.InstructorsList.Where(p => p.Id == @schedulerVM.InstructorId).FirstOrDefault() != null)
            {
                <FontLabel fontSize="12px">@schedulerVM.InstructorsList.Where(p=>p.Id == @schedulerVM.InstructorId).First().Name</FontLabel>
            }
            else
            {
                <FontLabel>-</FontLabel>
            }
        </span>
    </div>
</div>
<div class="row justify-content-start align-items-center m-0 custom-border-y  my-1" style="background:#2e66ff1f">
    <div class="col-12 d-flex justify-content-between">
        <div class="mx-3">
            <div class="d-flex justify-content-start popup-title"><FontLabel Class="font-weight-bold">Comments</FontLabel></div>
            <FontLabel fontSize="12px" Class="d-flex justify-content-start">
                @(schedulerVM.Comments ?? "-")
            </FontLabel>
        </div>
    </div>
</div>

<div class="row justify-content-start align-items-center m-0 custom-border-y  my-1" style="background:#2f66ff1f">
    <div class="col-12 d-flex justify-content-between">
        <div class="mx-3">
            <div class="d-flex justify-content-start popup-title"><FontLabel Class="font-weight-bold">Internal Comments</FontLabel></div>
            <FontLabel fontSize="12px" Class="d-flex justify-content-start">
                @(schedulerVM.InternalComments ?? "-")
            </FontLabel>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between">
    @if (uiOptions.IsDisplayCheckOutOption)
    {
        if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, "Scheduler") && isAllowToEdit)
        {
            if (uiOptions.IsDisplayCheckInButton)
            {
                <TelerikButton ButtonType="@ButtonType.Button" ThemeColor="info" OnClick="@CheckInAircraft"
                   Class="btn k-btn-primary flex-fill mx-1" Enabled="@(!uiOptions.IsBusyCheckOutButton)">
                    Check In
                    <TelerikLoader Class="button-loader-indicator" ThemeColor="light" Visible="@uiOptions.IsBusyCheckOutButton">
                    </TelerikLoader>
                </TelerikButton>
            }
            else
            {
                <TelerikButton ButtonType="@ButtonType.Button" ThemeColor="success" OnClick="@CheckOutAircraft"
                   Class="btn k-btn-success flex-fill mx-1" Enabled="@(!uiOptions.IsBusyCheckOutButton)">
                    Check Out
                    <TelerikLoader Class="button-loader-indicator" ThemeColor="light" Visible="@uiOptions.IsBusyCheckOutButton">
                    </TelerikLoader>
                </TelerikButton>
            }
        }

        if (schedulerVM.AircraftSchedulerDetailsVM.IsCheckOut)
        {
            if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, "Scheduler") && isAllowToEdit)
            {
                <TelerikButton ButtonType="@ButtonType.Button" ThemeColor="info" OnClick="@ShowEditEndTimeForm"
                   Class="btn k-btn-primary flex-fill mx-1">
                    <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                    Edit End Time
                </TelerikButton>

                <TelerikButton ButtonType="@ButtonType.Button" ThemeColor="info" OnClick="@OpenUnCheckOutDialog"
                   Class="btn k-btn-primary flex-fill mx-1"> Un-Check Out </TelerikButton>
            }
        }
        else
        {
            if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, "Scheduler") && isAllowToEdit)
            {
                <TelerikButton ButtonType="@ButtonType.Button" ThemeColor="info" OnClick="@OpenForm"
                   Class="btn k-btn-primary flex-fill">
                    <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                    Edit
                </TelerikButton>

            }
            if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, "Scheduler") && isAllowToDelete)
            {
                <TelerikButton ButtonType="@ButtonType.Button" ThemeColor="error" OnClick="@OpenDeleteDialog"
                   Class="btn k-btn-error flex-fill mx-1"> Delete </TelerikButton>
            }
        }
    }
    else if (schedulerVM.AircraftSchedulerDetailsVM.CheckInTime != null)
    {
        if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, "Scheduler") && isAllowToEdit)
        {
            <TelerikButton ButtonType="@ButtonType.Button" ThemeColor="info" OnClick="@ShowEditEndTimeForm"
                   Class="btn k-btn-primary flex-fill mx-1">
                <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                Edit End Time
            </TelerikButton>

            <TelerikButton ButtonType="@ButtonType.Button" ThemeColor="info" OnClick="@EditFlightTime"
                   Class="btn k-btn-primary flex-fill mx-1">
                <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                Edit Flight Time
            </TelerikButton>
        }
    }
    else
    {
        <TelerikButton ButtonType="@ButtonType.Submit" ThemeColor="info" Class="btn k-btn-primary flex-fill mx-1" Enabled="@(!isBusySubmitButton)">
            Save
            <TelerikLoader Class="button-loader-indicator" ThemeColor="light" Visible="@isBusySubmitButton">
            </TelerikLoader>

        </TelerikButton>

        <TelerikButton ButtonType="@ButtonType.Button" ThemeColor="info" OnClick="@OpenMainForm"
                   Class="btn k-btn-primary flex-fill mx-1"> Back </TelerikButton>
    }
    <TelerikButton ButtonType="@ButtonType.Button" OnClick="() => CloseDialog()"
                   ThemeColor="secondary" FillMode="Outline" Class="k-btn-secondary-outline flex-fill ms-1" Enabled="@(!isBusySubmitButton)">
        Cancel
    </TelerikButton>
</div>

@{
    if (isDisplayChildPopup)
    {
        <CustomPopupComponent Title="@childPopupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false"
                      OnClose="@(()=> {isDisplayChildPopup = false;})">

            <Body>

                    <AirportDetails AirportDetailInfo="@airportDetails"></AirportDetails>
            </Body>
        </CustomPopupComponent>
    }
}