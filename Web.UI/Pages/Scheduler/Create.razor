@using DataModels.Enums
@using DataModels.VM.AircraftEquipment
@using DataModels.VM.Common
@using System.Collections.ObjectModel
@using System.ComponentModel
@using DE = DataModels.Entities
@using DataModels.Entities;
@using DataModels.VM;
@using Models.Shared;
@using Newtonsoft.Json;

<style>
    .hide {
        display: none
    }
</style>

@if (uiOptions.IsDisplayMainForm)
{
    <TelerikForm Model="@schedulerVM" OnValidSubmit="@OnValidSubmit">

        <FormValidation>
            <CustomValidationSummary> </CustomValidationSummary>
        </FormValidation>

        <FormItems>
            @if (uiOptions.IsDisplayForm)
            {
                <div class="row compact-row">

                    @if (schedulerVM.RoleId == (int)DataModels.Enums.UserRole.SuperAdmin)
                    {
                        <div class="col-12">
                            <label>Company</label>

                            <TelerikComboBox Id=companyId Data="@schedulerVM.CompaniesList" TextField="Name"
                                 Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                 Placeholder="Select Company" ValueField="Id"
                                 Value="@schedulerVM.CompanyId"
                                 ValueExpression="@( () => schedulerVM.CompanyId )"
                                 ValueChanged="@( (int value) => OnCompanyValueChanged(value) )">
                            </TelerikComboBox>

                            <TelerikValidationMessage For="@(() => schedulerVM.CompanyId)"></TelerikValidationMessage>
                        </div>
                    }

                    @if (schedulerVM.CompanyId != 0)
                    {
                        <div class="col-6">
                            <label>Display Title</label>
                            <TelerikTextBox PlaceHolder="Enter Title" Id="title" @bind-Value="@schedulerVM.DisplayTitle"></TelerikTextBox>
                            <TelerikValidationMessage For="@(() => schedulerVM.DisplayTitle)"></TelerikValidationMessage>
                        </div>
                        <div class="col-6">
                            <label>Activity Type</label>
                            <TelerikComboBox Id=scheduleActivityId Data="@schedulerVM.ScheduleActivitiesList" TextField="Name"
                                 Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                 Placeholder="Select Activity" ValueField="Id"
                                 Value="@schedulerVM.ScheduleActivityId"
                                 ValueExpression="@( () => schedulerVM.ScheduleActivityId )"
                                 ValueChanged="@( (long? value) => OnActivityTypeValueChanged(value) )">
                            </TelerikComboBox>

                            <TelerikValidationMessage For="@(() => schedulerVM.ScheduleActivityId)"></TelerikValidationMessage>
                        </div>
                        <div class="col-6">
                            <label>Start Time</label>
                            <TelerikDateTimePicker @bind-Value="@schedulerVM.StartTime"
                                       Format="MM/dd/yyyy %h:mm tt" Id="startTime">

                                <DateTimePickerSteps Minute="30" />

                            </TelerikDateTimePicker>

                            <TelerikValidationMessage For="@(() => schedulerVM.StartTime)"></TelerikValidationMessage>
                        </div>
                        <div class="col-6">
                            <label>End Time</label>
                            <TelerikDateTimePicker @bind-Value="@schedulerVM.EndTime"
                                       Format="MM/dd/yyyy %h:mm tt" Id="endTime">

                                <DateTimePickerSteps Minute="30" />

                            </TelerikDateTimePicker>

                            <TelerikValidationMessage For="@(() => schedulerVM.EndTime)"></TelerikValidationMessage>
                        </div>

                        <div class="col-6">
                            <label>Departure Airport</label>

                            <TelerikAutoComplete TItem="DropDownGuidValues"
                                     ScrollMode="@DropDownScrollMode.Scrollable"
                                     ItemHeight="30" ValueField="@(nameof(DropDownGuidValues.Name))"
                                     OnRead="@GetDepartureAirportsList"
                                     PageSize="20" Placeholder="Type 2 characters to load the airports"
                                     @bind-Value="@schedulerVM.DepartureAirport"
                                     Filterable="true" FilterOperator="@StringFilterOperator.Contains">
                                <AutoCompleteSettings>
                                    <AutoCompletePopupSettings Height="300px" />
                                </AutoCompleteSettings>
                            </TelerikAutoComplete>

                            <TelerikValidationMessage For="@(() => schedulerVM.DepartureAirport)"></TelerikValidationMessage>
                            @if (!string.IsNullOrWhiteSpace(schedulerVM.DepartureAirport))
                            {
                                <a href="javascript:void(0)" style="color:#1151F3" @onclick="@((ui) => OpenAirportDetailsPopup(schedulerVM.DepartureAirport))">
                                    <FontLabel fontSize="12px">View details</FontLabel>
                                </a>
                            }

                        </div>

                        <div class="col-6">
                            <label>Arrival Airport</label>

                            <TelerikAutoComplete TItem="DropDownGuidValues" Data="@schedulerVM.ArrivalAirportsList"
                                     ScrollMode="@DropDownScrollMode.Scrollable"
                                     ItemHeight="30" ValueField="@(nameof(DropDownGuidValues.Name))"
                                     PageSize="20" Placeholder="Type 2 characters to load the airports"
                                     OnRead="@GetArrivalAirportsList" @bind-Value="@schedulerVM.ArrivalAirport"
                                     Filterable="true" FilterOperator="@StringFilterOperator.Contains">
                                <AutoCompleteSettings>
                                    <AutoCompletePopupSettings Height="300px" />
                                </AutoCompleteSettings>
                            </TelerikAutoComplete>

                            @if (!string.IsNullOrWhiteSpace(schedulerVM.ArrivalAirport))
                            {
                                <a href="javascript:void(0)" style="color:#1151F3" @onclick="@((ui) => OpenAirportDetailsPopup(schedulerVM.ArrivalAirport))">
                                    <FontLabel fontSize="12px">View details</FontLabel>
                                </a>
                            }

                            <TelerikValidationMessage For="@(() => schedulerVM.ArrivalAirport)"></TelerikValidationMessage>
                        </div>

                          <div class="col-6">
                                <label>Flight Category</label>
                                <TelerikComboBox Id=flightCategoryId Data="@schedulerVM.FlightCategoriesList" TextField="Name"
                                 Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                 Placeholder="Select Category" ValueField="Id"
                                 @bind-Value="@(schedulerVM.FlightCategoryId)">

                                </TelerikComboBox>

                                <TelerikValidationMessage For="@(() => schedulerVM.FlightCategoryId)"></TelerikValidationMessage>
                            </div>

                        @if (uiOptions.IsDisplayAircraftDropDown)
                        {
                            <div class="col-6">
                                <label>Aircraft</label>
                                <TelerikComboBox Id=aircraftId Data="@schedulerVM.AircraftsList" TextField="Name"
                                 Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                 Placeholder="Select Aircraft" ValueField="Id"
                                 @bind-Value="@(schedulerVM.AircraftId)">

                                </TelerikComboBox>

                                <TelerikValidationMessage For="@(() => schedulerVM.AircraftId)"></TelerikValidationMessage>
                            </div>
                        }

                        <div class="col-6">
                            <label>Flight Tag</label>
                            <MultiSelectWithAllCheckbox Data="@schedulerVM.FlightTagsList" SelectedData="GetFlightTagIds()"
                                            PlaceHolderText="Select Tags"
                                            UpdateParentListCallback="@UpdateSelectedFlightTagData">
                            </MultiSelectWithAllCheckbox>

                            <TelerikButton ButtonType="@ButtonType.Button" OnClick=@(args => OpenCreateTagDialogAsync())
                               Class="btn k-btn-primary addTag" ThemeColor="primary">
                                <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons>
                            </TelerikButton>
                        </div>

                        @if (schedulerVM.ScheduleActivityId > 0)
                        {
                            @if (uiOptions.IsDisplayMember1Dropdown)
                            {
                                <div class="col-6">
                                    <label>Member 1</label>
                                    <TelerikComboBox Id=member1Id Data="@schedulerVM.Member1List" TextField="Name"
                                 Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                 Placeholder="Select Member 1" ValueField="Id"
                                 @bind-Value="@(schedulerVM.Member1Id)">

                                    </TelerikComboBox>

                                    <TelerikValidationMessage For="@(() => schedulerVM.Member1Id)"></TelerikValidationMessage>

                                </div>
                            }

                            @if (schedulerVM.IsDisplayMember2Dropdown)
                            {
                                <div class="col-6">
                                    <label>Member 2</label>
                                    <TelerikComboBox Id=member2Id Data="@schedulerVM.Member2List" TextField="Name"
                                 Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                 Placeholder="Select Member 2" ValueField="Id"
                                 @bind-Value="@(schedulerVM.Member2Id)">

                                    </TelerikComboBox>

                                    <TelerikValidationMessage For="@(() => schedulerVM.Member2Id)"></TelerikValidationMessage>

                                </div>

                            }

                            @if (uiOptions.IsDisplayFlightInfo)
                            {
                                <div class="col-6">
                                    <label>Flight Type</label>
                                    <TelerikRadioGroup Data="@flightTypes" ValueField="@nameof(RadioButtonItem.Text)"
                                   TextField="@nameof(RadioButtonItem.Text)" @bind-Value="@schedulerVM.FlightType"
                                   Layout="@RadioGroupLayout.Horizontal"
                                   LabelPosition="@RadioGroupLabelPosition.After" />
                                </div>

                                <div class="col-6">
                                    <label>Flight Rules</label>
                                    <TelerikRadioGroup Data="@flightRules" ValueField="@nameof(RadioButtonItem.Text)"
                                   TextField="@nameof(RadioButtonItem.Text)" @bind-Value="@schedulerVM.FlightRules"
                                   Layout="@RadioGroupLayout.Horizontal"
                                   LabelPosition="@RadioGroupLabelPosition.After" />
                                </div>

                                <div class="col-6">
                                    <label>Est Hours</label>
                                    <TelerikNumericTextBox Placeholder="Enter Hours" @bind-Value="@schedulerVM.EstHours" />

                                </div>
                            }
                            @if (uiOptions.IsDisplayInstructor)
                            {
                                <div class="col-6">
                                    <label>Instructor</label>
                                    <TelerikComboBox Id=instructorId Data="@schedulerVM.InstructorsList" TextField="Name"
                                 Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                                 Placeholder="Select Instructor" ValueField="Id"
                                 @bind-Value="@(schedulerVM.InstructorId)" />
                                </div>
                            }

                            @if (uiOptions.IsDisplayFlightRoutes)
                            {
                                <div class="col-6">
                                    <label>Flight Routes</label>
                                    <TelerikTextArea Class="w-100" PlaceHolder="Enter flight routes" AutoSize="true"
                                 @bind-Value="@schedulerVM.FlightRoutes" />
                                </div>
                            }

                            <div class="col-6">
                                <label>Comments</label>
                                <TelerikTextArea Class="w-100" PlaceHolder="Enter comments" AutoSize="true"
                                 @bind-Value="@schedulerVM.Comments" />
                            </div>
                            <div class="col-6">
                                <label>Internal Comments</label>

                                <TelerikTextArea Class="w-100" PlaceHolder="Enter internal comments" AutoSize="true"
                                 @bind-Value="@schedulerVM.InternalComments" />
                            </div>
                        }

                        @if (uiOptions.IsDisplayStandBy)
                        {
                            <div class="col-6">
                                <label>StandBy</label>

                                <TelerikCheckBox @bind-Value="@schedulerVM.IsStandBy" Id="isRecurring" />
                            </div>
                        }

                    }
                </div>

                <hr />
                <div class="row bg-gray d-flex justify-content-end">
                    <div class="d-flex justify-content-end">

                        <TelerikButton ButtonType="@ButtonType.Submit" ThemeColor="info"
                               Class="btn k-btn-primary mx-1" Enabled="@(!isBusySubmitButton)">
                            Continue
                            <TelerikLoader Class="button-loader-indicator" ThemeColor="light" Visible="@isBusySubmitButton">
                            </TelerikLoader>
                        </TelerikButton>

                        <TelerikButton ButtonType="@ButtonType.Button" OnClick="() => CloseDialog()" Enabled="@(!isBusySubmitButton)"
                               ThemeColor="secondary" FillMode="Outline" Class="ms-1 k-btn-secondary-outline">
                            Cancel
                        </TelerikButton>
                    </div>
                </div>
            }
            else
            {
                <Web.UI.Pages.Scheduler.DetailsView CheckInAircraftParentEvent="@CheckInAircraft"
                                            CheckOutAircraftParentEvent="@CheckOutAircraft" CloseDialogParentEvent="@CloseDialog"
                                            EditFlightTimeParentEvent="@EditFlightTime" isAllowToDelete="@isAllowToDelete" isAllowToEdit="@isAllowToEdit"
                                            OpenDeleteDialogParentEvent="@OpenDeleteDialog" OpenFormParentEvent="@OpenForm" OpenMainFormParentEvent="@OpenMainForm"
                                            OpenUnCheckOutDialogParentEvent="@OpenUnCheckOutDialog" schedulerVM="@schedulerVM"
                                            ShowEditEndTimeFormParentEvent="@ShowEditEndTimeForm" uiOptions="@uiOptions">

                </Web.UI.Pages.Scheduler.DetailsView>
            }

            @if (schedulerVM.AircraftSchedulerDetailsVM.IsCheckOut || schedulerVM.AircraftSchedulerDetailsVM.CheckInTime != null)
            {
                <div class="my-1">
                    <table style="width:100%;" class="table table-striped table-hover my-1">
                        <thead>
                            <tr style="font-size:12px !important">
                                <th>Meter</th>
                                <th>Time Out</th>
                                <th>Time In</th>
                                <th>Total</th>
                            </tr>
                        </thead>

                        <tbody>

                            @foreach (AircraftEquipmentTimeVM aircraftEquipmentTime in schedulerVM.AircraftEquipmentsTimeList)
                            {
                                AircraftScheduleHobbsTime aircraftScheduleHobbsTime = schedulerVM.AircraftEquipmentHobbsTimeList.Where(p => p.AircraftEquipmentTimeId == aircraftEquipmentTime.Id).FirstOrDefault();
                                <tr>
                                    <td style="font-size:12px !important">@aircraftEquipmentTime.EquipmentName</td>

                                    @if (aircraftScheduleHobbsTime != null)
                                    {
                                        <td style="font-size:12px !important">@aircraftScheduleHobbsTime.OutTime</td>
                                        <td style="font-size:12px !important">@aircraftScheduleHobbsTime.InTime</td>
                                        <td style="font-size:12px !important">@aircraftScheduleHobbsTime.TotalTime</td>
                                    }
                                    else
                                    {
                                        <td style="font-size:12px !important">@aircraftEquipmentTime.Hours</td>
                                        <td style="font-size:12px !important">-</td>
                                        <td style="font-size:12px !important">-</td>
                                    }

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

        </FormItems>

        <FormButtons></FormButtons>
    </TelerikForm>
}

@if (uiOptions.IsDisplayEditEndTimeForm)
{
    <EditEndTimeForm CloseDialogParentEvent=@CloseDialog IsOpenFromContextMenu=@IsOpenFromContextMenu
                 RefreshSchedulerDataSourceParentEvent=@RefreshSchedulerDataSourceParentEvent
                 schedulerVM=@schedulerVM uiOptions="@uiOptions" HideEditEndTimeFormParentEvent=@HideEditEndTimeForm >
    </EditEndTimeForm>
}

@if (uiOptions.IsDisplayCheckInForm)
{
     <EditCheckInForm CloseDialogParentEvent=@CloseDialog IsOpenFromContextMenu=@IsOpenFromContextMenu
                 RefreshSchedulerDataSourceParentEvent=@RefreshSchedulerDataSourceParentEvent
                 schedulerVM=@schedulerVM uiOptions="@uiOptions" CloseCheckInFormParentEvent=@CloseCheckInForm >
    </EditCheckInForm>
}
@{
    if (isDisplayChildPopup)
    {
        <CustomPopupComponent Title="@childPopupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false"
                      OnClose="@(()=> {isDisplayChildPopup = false;})">

            <Body>

                @if (operationType == OperationType.UnCheckOut)
                {
                    <div>
                        <p class="m-4"> Are you sure, You want to un-check out appointment ? </p>
                        <div class="row d-flex justify-content-end">
                            <div class="col-4 d-flex justify-content-between">

                                <TelerikButton Class="mx-1 btn k-btn-primary flex-fill" ThemeColor="info" OnClick="()=>UnCheckOutAppointment()" Enabled="@(!uiOptions.IsBusyUnCheckOutButton)">
                                    Yes
                                    <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="uiOptions.IsBusyUnCheckOutButton">
                                    </TelerikLoader>
                                </TelerikButton>


                                <TelerikButton Class="mx-1 btn k-btn-secondary flex-fill" ThemeColor="secondary" OnClick="()=>CloseChildDialogAsync()">
                                    No
                                </TelerikButton>
                            </div>
                        </div>
                    </div>
                }

                else if (operationType == OperationType.Delete)
                {
                    <div>
                        <p class="m-4"> Are you sure, You want to delete appointment ? </p>
                        <div class="row d-flex justify-content-end">
                            <div class="col-4 d-flex justify-content-between">

                                <TelerikButton Class="btn k-btn-danger flex-fill mx-1" ThemeColor="error" OnClick="()=>DeleteAsync()" Enabled="@(!uiOptions.IsBusyDeleteButton)">
                                    Yes
                                    <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="uiOptions.IsBusyDeleteButton">
                                    </TelerikLoader>
                                </TelerikButton>


                                <TelerikButton Class="mr-1 btn k-btn-secondary flex-fill mx-1" ThemeColor="secondary" OnClick="()=>CloseChildDialogAsync()">
                                    No
                                </TelerikButton>
                            </div>
                        </div>
                    </div>
                }
                else if (operationType == OperationType.DocumentViewer)
                {
                    <AirportDetails AirportDetailInfo="@airportDetails"></AirportDetails>
                }
                else
                {
                    <Web.UI.Pages.Reservation.FlightTag.Create CloseDialogCallBack="@CloseChildDialog" />                    
                }
            </Body>
        </CustomPopupComponent>
    }
}
