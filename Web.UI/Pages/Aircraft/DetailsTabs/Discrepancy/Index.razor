@namespace Web.UI.Pages.Aircraft.DetailsTabs.Discrepancy
@using DataModels.Enums
@using DataModels.VM.Discrepancy
@using Telerik.Blazor
@using Web.UI.Shared.Components

@page "/Discrepancy"

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between">
            <div>
                <ComponentTitle Title="Discrepancies" Type="AdministrationTitle" />
            </div>
            <div>
                <div class="col-md-4">
                    <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" Enabled="@(!isBusyAddButton)"
                                   OnClick="() => OpenCreateDialog(new DiscrepancyDataVM())">
                        <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add
                        <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                        </TelerikLoader>
                    </TelerikButton>
                </div>

            </div>
        </div>
        <hr class="mt-2 my-1" />
    </div>
</div>

<div class="row my-2">

    <div class="col-md-3 my-1">
        <TelerikComboBox Id=statusId Data="@Statuses" TextField="Name" Value="@statusId"
                         ValueChanged="@( (int value) => OnStatusValueChange(value) )"
                         Filterable="true" FilterOperator="@StringFilterOperator.Contains"
                         Placeholder="Select Status" ValueField="Id" ClearButton="false">
        </TelerikComboBox>
    </div>
    <div class="col-md-3 my-1">
        <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Discrepancy" ValueChanged="@( (string value) => OnSearchValueChanges<DiscrepancyDataVM>(value, grid) )" />
    </div>
</div>

<div style="position: relative; width:100%; min-height: 400px;">
    <TelerikLoaderContainer OverlayThemeColor="light"
                            Visible="@(isGridDataLoading)"
                            Text="@null" Class="initial-data-loader">
        <Template>
            <TelerikLoader Type="@LoaderType.InfiniteSpinner"
                           Size="@(ThemeConstants.Loader.Size.Large)">
            </TelerikLoader>
        </Template>
    </TelerikLoaderContainer>

    <TelerikGrid TItem="DiscrepancyDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
                 Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler"
                 SelectionMode="@GridSelectionMode.Single"
                 SelectedItemsChanged="@((IEnumerable<DiscrepancyDataVM> discrepanciesList) => OnSelect(discrepanciesList))">

        <GridSettings>
            <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
        </GridSettings>

        <GridColumns>

            <GridColumn Field="@nameof(DiscrepancyDataVM.ReportedByUser)" Title="Reported By" />
            <GridColumn Field="@nameof(DiscrepancyDataVM.Description)" Title="Description" />
            <GridColumn Field="@nameof(DiscrepancyDataVM.CreatedOn)" Title="Created" />

            <GridColumn Field="@nameof(DiscrepancyDataVM.Status)" Context="dataItem" Title="Status">
                <Template>

                    <style>
                        .customBadge {
                            height: 29px;
                            border-radius: 5px;
                            font-size: 12px !important;
                        }
                    </style>
                    @{
                        DiscrepancyDataVM value = dataItem as DiscrepancyDataVM;
                    }

                    @if (value.DiscrepancyStatusId == (byte)DiscrepancyStatus.New_Pending || value.DiscrepancyStatusId == (byte)DiscrepancyStatus.Unable_To_Verify)
                    {
                        <span class="btn btn-primary customBadge" style="background-color: #dc3545;border-bottom-color:#dc3545">@value.Status</span>
                    }
                    else if (value.DiscrepancyStatusId == (byte)DiscrepancyStatus.Verified_PedingtoRepair)
                    {
                        <span class="btn btn-success customBadge" style="background-color: #FFC300;border-bottom-color:#FFC300">@value.Status</span>
                    }
                    else
                    {
                        <span class="btn btn-secondary customBadge" style="background-color:#009b51;border-bottom-color:#009b51">@value.Status</span>
                    }

                </Template>
            </GridColumn>

            <GridCommandColumn Context="dataItem" Title="Action">
                @{
                    DiscrepancyDataVM discrepancyDataVM = dataItem as DiscrepancyDataVM;

                    <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>OpenCreateDialog(discrepancyDataVM)"
                               ThemeColor="success" Enabled=!discrepancyDataVM.IsLoadingEditButton>

                        <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                        <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light"
                                   Visible="discrepancyDataVM.IsLoadingEditButton">
                        </TelerikLoader>

                    </TelerikButton>

                }
            </GridCommandColumn>

        </GridColumns>

    </TelerikGrid>

</div>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <CreateTabs discrepancyData="@discrepancy" CloseDialogCallBack="@CloseDialog"></CreateTabs>
            }
            else
            {
                    //Delete popup
                @*    <div>
                    <p class="mb-4">Are you sure, You want to remove <b> @_companyData.Name </b>?</p>
                    <div class="row" style="text-align:right">
                    <div class="col">

                    <TelerikButton Class="btn k-btn-danger" OnClick="() => DeleteAsync(_companyData.Id)" Enabled="@(!isBusyDeleteButton)">
                    Yes
                    <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyDeleteButton">
                    </TelerikLoader>
                    </TelerikButton>

                    <TelerikButton ThemeColor="secondary" Class="btn k-btn-secondary" OnClick="() => isDisplayPopup = false">
                    No
                    </TelerikButton>

                    </div>
                    </div>
                    </div>*@
            }
        </Body>
    </CustomPopupComponent>
}