@using DataModels.VM.AircraftEquipment;
@using DataModels.Enums;

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <div>
            <ComponentTitle Title="Aircraft Equipments" Type="AdministrationTitle" />
        </div>
        <div>
            @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Create, @moduleName) && isAllowToEdit)
            {
                <TelerikButton Class="btn k-btn-primary" ThemeColor="primary" OnClick="() => AircraftEquipmentCreateDialog(new AircraftEquipmentDataVM())" Enabled="@(!isBusyAddButton)">
                    <CustomIcons IconName="add" PrimaryColor="White"></CustomIcons> Add

                    <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light" Visible="@isBusyAddButton">
                    </TelerikLoader>

                </TelerikButton>
            }
        </div>
    </div>
</div>

<div>
    <CustomCollapseBar Class="my-1" IsFilterBarVisible="isFilterBarVisible"
                       OnPanelCollapsed="@(() => {isFilterBarVisible = false;})"
                       OnPanelExpanded="@(() => {isFilterBarVisible = true;})">
        <HeaderContent>
            <div class="d-flex justify-content-between">
                <span class="my-0">
                    <CustomIcons IconName="search" /> Search
                </span>
                <span>
                    @if (isFilterBarVisible)
                    {
                        <CustomIcons IconName="minus" />
                    }
                    else
                    {
                        <CustomIcons IconName="plus" />
                    }
                </span>
            </div>
        </HeaderContent>
        <ChildContent>
            <div class="row my-2">
                <div class="col-md-4">
                    <TelerikTextBox Name="SearchText" OnChange="() => grid.Rebind()" PlaceHolder="Search Company" ValueChanged="@( (string value) => OnSearchValueChanges<AircraftEquipmentDataVM>(value, grid) )" />
                </div>
            </div>
        </ChildContent>
    </CustomCollapseBar>
</div>

<TelerikGrid TItem="AircraftEquipmentDataVM" OnRead="@LoadData" Pageable="true" @ref="@grid"
             Sortable="true" PageSize="@pageSize" PageSizeChanged="@PageSizeChangedHandler">

    <GridSettings>
        <Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent></Web.UI.Shared.Components.TelerikGridPager.TelerikGridPagerComponent>
    </GridSettings>

    <GridColumns>

        <GridColumn Field="@nameof(AircraftEquipmentDataVM.Status)" Title="Status" Sortable="true"></GridColumn>
        <GridColumn Field="@nameof(AircraftEquipmentDataVM.Item)" Title="Item" Sortable="true"></GridColumn>
        <GridColumn Field="@nameof(AircraftEquipmentDataVM.Classification)" Title="Classification" Sortable="true"></GridColumn>
        <GridColumn Field="@nameof(AircraftEquipmentDataVM.Make)" Title="Make" Sortable="true"></GridColumn>
        <GridColumn Field="@nameof(AircraftEquipmentDataVM.Model)" Title="Model" Sortable="true"></GridColumn>

        <GridCommandColumn Context="dataItem" Title="Action">
            @{
                AircraftEquipmentDataVM data = dataItem as AircraftEquipmentDataVM;

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Edit, moduleName))
                {
                    <TelerikButton Class="btn k-btn-grid-edit mx-1" OnClick="()=>AircraftEquipmentCreateDialog(data)"
                           ThemeColor="success" Enabled=!data.IsLoadingEditButton>

                        <CustomIcons IconName="grid-edit" PrimaryColor="white"></CustomIcons>
                        <TelerikLoader Class="button-loader-indicator" Size="sm" ThemeColor="light"
                               Visible="data.IsLoadingEditButton">
                        </TelerikLoader>

                    </TelerikButton>
                }

                @if (_currentUserPermissionManager.IsAllowed(AuthStat, PermissionType.Delete, moduleName))
                {
                    <TelerikButton Class="btn k-btn-grid-delete mx-1" ThemeColor="error" OnClick="()=>OpenDeleteDialog(data)">
                        <CustomIcons IconName="grid-delete" PrimaryColor="white"></CustomIcons>
                    </TelerikButton>
                }
            }
        </GridCommandColumn>

    </GridColumns>

</TelerikGrid>

@if (isDisplayPopup)
{
    <CustomPopupComponent Title="@popupTitle"
                      HeaderCssClass=@CustomPopupComponent.GetHeaderCssClass(operationType)
                      CloseOnOutsideClick="false" Width="600px"
                      OnClose="@(()=> {isDisplayPopup = false;})">
        <Body>

            @if (operationType == OperationType.Create || operationType == OperationType.Edit)
            {
                <Web.UI.Pages.Aircraft.DetailsTabs.AircraftEquipment.Create aircraftEquipmentsVM=@aircraftEquipmentsVM CloseDialogCallBack="@CloseDialog">
                </Web.UI.Pages.Aircraft.DetailsTabs.AircraftEquipment.Create>
            }
            else if (operationType == OperationType.Delete)
            {
                <div>
                    <p class="mb-4">Are you sure, You want to delete <b> @aircraftEquipmentsVM.Item </b>?</p>
                    <div class="row" style="text-align:right">
                        <div class="col">

                            <TelerikButton Class="btn k-btn-danger" ThemeColor="error" OnClick="()=>DeleteAsync(aircraftEquipmentsVM.Id)">
                                Yes
                            </TelerikButton>

                            <TelerikButton Class="btn k-btn-secondary" ThemeColor="secondary" OnClick="()=>isDisplayPopup = false">
                                No
                            </TelerikButton>
                        </div>
                    </div>
                </div>
            }
        </Body>
    </CustomPopupComponent>
}

